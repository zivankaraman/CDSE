[{"path":"https://zivankaraman.github.io/CDSE/articles/BeforeYouStart.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Before you start","text":"CDSE package R developed allow access ‘Copernicus Data Space Ecosystem’ data services R. 'Copernicus Data Space Ecosystem', deployed 2023, offers access EO data collection Copernicus missions, discovery download capabilities numerous data processing tools. particular, ‘Sentinel Hub’ API provides access multi-spectral multi-temporal big data satellite imagery service, capable fully automated, real-time processing distribution remote sensing data related EO products. Users can use APIs retrieve satellite data AOI specific time range full archives matter seconds. working application EO area interest relatively small compared image tiles distributed Copernicus (100 x 100 km), allows retrieve just portion image interest rather downloading huge tile image file processing locally. goal CDSE package provide easy access functionality R. main functions allow search catalog available imagery Sentinel-1, Sentinel-2, Sentinel-3, Sentinel-5 missions, process download images area interest time range various formats. functions might added subsequent releases package.","code":""},{"path":"https://zivankaraman.github.io/CDSE/articles/BeforeYouStart.html","id":"accessing-cdse-data-and-services","dir":"Articles","previous_headings":"","what":"Accessing CDSE data and services","title":"Before you start","text":"Access 'Copernicus Data Space Ecosystem' free, register use API. can create free account explained User registration authentication. free account limitations quotas applied , sufficient individual users. details provided Quotas Limitations.","code":""},{"path":"https://zivankaraman.github.io/CDSE/articles/BeforeYouStart.html","id":"api-authentication","dir":"Articles","previous_headings":"","what":"API authentication","title":"Before you start","text":"API functions require specific authentication. API uses OAuth2 Authentication requires access token. essence, piece information add requests server knows ’s . able request token, need register OAuth Client account settings. obtain client credentials - client id client secret. use client credentials authenticate API. Make sure copy personal OAuth secret, able see ! can find details documentation page dedicated API authentication.","code":""},{"path":"https://zivankaraman.github.io/CDSE/articles/BeforeYouStart.html","id":"storing-client-credentials","dir":"Articles","previous_headings":"","what":"Storing client credentials","title":"Before you start","text":"store client credentials securely. hard-code (include clear text) scripts, particularly scripts shared others. Don’t save repository (like Git) shared folder. can course provide credentials every time needed, cumbersome approach. simple way keep persistently available store system environment variables. can achieved defining personal project-level .Renviron file. recommend method simplicity use examples. also set environment variables Sys.setenv(), note persistent; values lost R session terminates. Another option store global options(), typically personal .Rprofile. two options require name-value pairs, example, CDSE_ID = \"yourid\" CDSE_SECRET = \"yoursecret\". can find information dealing sensitive information R Managing secrets.","code":""},{"path":"https://zivankaraman.github.io/CDSE/articles/BeforeYouStart.html","id":"oauth-authentication-client","dir":"Articles","previous_headings":"","what":"OAuth authentication client","title":"Before you start","text":"recommended way authenticate CDSE API use httr2_oauth_client object (httr2 package) returned GetOAuthClient function, shown . provide client credentials arguments function. returned object passed client argument functions requiring authentication. underlying services httr2 package automatically take care authentication lifecycle management (refreshing token, etc.). credentials obfuscated output. However, noted object returned GetOAuthClient function validated backend. credentials provided checked first time object used query. Therefore, even GetOAuthClient function raise error assume credentials accepted backend. demonstrate , can provide dummy id, secret, URL, error raised stage.","code":"id <- Sys.getenv(\"CDSE_ID\") secret <- Sys.getenv(\"CDSE_SECRET\") OAuthClient <- GetOAuthClient(id = id, secret = secret) class(OAuthClient) #> [1] \"httr2_oauth_client\" OAuthClient #> <httr2_oauth_client> #> name: x9x99xx99x9xx99xx99xx9xx99x99x99 #> id: xx-9x999x9x-9999-999x-xxxx-x9999x99x99x #> secret: <REDACTED> #> token_url: https://identity.dataspace.copernicus.eu/auth/realms/CDSE/protocol/openid-connect/token #> auth: oauth_client_req_auth_header id <- \"my_dummy_id\" secret <- \"my_dummy_secret\" OAuthClient <- GetOAuthClient(id = id, secret = secret, url = \"https://my_dummy_url.org\") class(OAuthClient) #> [1] \"httr2_oauth_client\" OAuthClient #> <httr2_oauth_client> #> • name     : \"a43e08ed613f62d6ca1af36d4230ccf6\" #> • id       : \"my_dummy_id\" #> • secret   : <REDACTED> #> • token_url: \"https://my_dummy_url.org\" #> • auth     : \"oauth_client_req_auth_header\""},{"path":"https://zivankaraman.github.io/CDSE/articles/BeforeYouStart.html","id":"oauth-authentication-token","dir":"Articles","previous_headings":"","what":"OAuth authentication token","title":"Before you start","text":"order able check immediately credentials work correctly, provided another authentication function called GetOAuthToken. takes arguments mentioned GetOAuthClient function, verifies credentials immediately. successful, returns connection token, (long) string can passed token argument functions requiring authentication. credentials refused backend, error raised. Please case must explicitly take care token lifecycle management. therefore recommend use function test credentials work, prefer passing object returned GetOAuthClient client argument functions CDSE package require authentication. token obfuscated shortened output.","code":"id <- Sys.getenv(\"CDSE_ID\") secret <- Sys.getenv(\"CDSE_SECRET\") OAuthToken <- GetOAuthToken(id = id, secret = secret) class(OAuthToken) #> [1] \"character\" OAuthToken #> [1] \"xxXxxXxxXxXXXxX9XxXxXxX9xXXxXxXxxXXxxxx9xxXxX9XXXXx9X9xXxX9XxXXXxxX9xXXXxx......\""},{"path":"https://zivankaraman.github.io/CDSE/articles/BeforeYouStart.html","id":"note-for-windows-users","dir":"Articles","previous_headings":"","what":"Note for Windows users","title":"Before you start","text":"Windows systems, depending network security settings, things might work box. get error connecting CDSE API complaining SSL/TLS handshake problem, try setting environment variable CURL_SSL_BACKEND openssl using functions CDSE package. can restart R session, type Sys.setenv(CURL_SSL_BACKEND = \"openssl\") using CDSE package. Even better, can permanently set environment variable .Renviron file (adding line CURL_SSL_BACKEND = \"openssl\") setting Windows system settings environment variables. can find information issue .","code":""},{"path":"https://zivankaraman.github.io/CDSE/articles/CDSE.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using 'Copernicus Data Space Ecosystem' API Wrapper","text":"CDSE package R developed allow access ‘Copernicus Data Space Ecosystem’ data services R. 'Copernicus Data Space Ecosystem', deployed 2023, offers access EO data collection Copernicus missions, discovery download capabilities numerous data processing tools. particular, ‘Sentinel Hub’ API provides access multi-spectral multi-temporal big data satellite imagery service, capable fully automated, real-time processing distribution remote sensing data related EO products. Users can use APIs retrieve satellite data AOI specific time range full archives matter seconds. working application EO area interest relatively small compared image tiles distributed Copernicus (100 x 100 km), allows retrieve just portion image interest rather downloading huge tile image file processing locally. goal CDSE package provide easy access functionality R. main functions allow search catalog available imagery Sentinel-1, Sentinel-2, Sentinel-3, Sentinel-5 missions, process download images area interest time range various formats. functions might added subsequent releases package.","code":""},{"path":"https://zivankaraman.github.io/CDSE/articles/CDSE.html","id":"api-authentication","dir":"Articles","previous_headings":"","what":"API authentication","title":"Using 'Copernicus Data Space Ecosystem' API Wrapper","text":"API functions require OAuth2 authentication. recommended procedure obtain authentication client object GetOAuthClient function pass client argument functions requiring authentication. detailed information, invited consult “start” document.","code":"id <- Sys.getenv(\"CDSE_ID\") secret <- Sys.getenv(\"CDSE_SECRET\") OAuthClient <- GetOAuthClient(id = id, secret = secret)"},{"path":"https://zivankaraman.github.io/CDSE/articles/CDSE.html","id":"collections","dir":"Articles","previous_headings":"","what":"Collections","title":"Using 'Copernicus Data Space Ecosystem' API Wrapper","text":"can get list imagery collections available 'Copernicus Data Space Ecosystem'. default, list formatted data.frame listing main collection features. also possible obtain raw list information setting argument as_data_frame FALSE.","code":"collections <- GetCollections(as_data_frame = TRUE) collections #>                      id                 title #> 1        sentinel-2-l1c        Sentinel 2 L1C #> 2    sentinel-3-olci-l2    Sentinel 3 OLCI L2 #> 3       sentinel-3-olci       Sentinel 3 OLCI #> 4      sentinel-3-slstr      Sentinel 3 SLSTR #> 5 sentinel-3-synergy-l2 Sentinel 3 Synergy L2 #> 6        sentinel-1-grd        Sentinel 1 GRD #> 7        sentinel-2-l2a        Sentinel 2 L2A #> 8        sentinel-5p-l2  Sentinel 5 Precursor #>                                                                    description #> 1                                     Sentinel 2 imagery processed to level 1C #> 2                 Sentinel 3 data derived from imagery captured by OLCI sensor #> 3                                   Sentinel 3 imagery captured by OLCI sensor #> 4                                  Sentinel 3 imagery captured by SLSTR sensor #> 5 Sentinel 3 data derived from imagery captured by both OLCI and SLSTR sensors #> 6                                     Sentinel 1 Ground Range Detected Imagery #> 7                                     Sentinel 2 imagery processed to level 2A #> 8                      Sentinel 5 Precursor imagery captured by TROPOMI sensor #>                  since instrument  gsd bands constellation long.min lat.min #> 1 2015-11-01T00:00:00Z        msi   10    13    sentinel-2     -180     -56 #> 2 2016-04-17T11:33:13Z       olci  300    NA          <NA>     -180     -85 #> 3 2016-04-17T11:33:13Z       olci  300    21          <NA>     -180     -85 #> 4 2016-04-17T11:33:13Z      slstr 1000    11          <NA>     -180     -85 #> 5 2016-04-17T11:33:13Z olci/slstr  300    NA          <NA>     -180     -85 #> 6 2014-10-03T00:00:00Z      c-sar   NA    NA    sentinel-1     -180     -85 #> 7 2016-11-01T00:00:00Z        msi   10    12    sentinel-2     -180     -56 #> 8 2018-04-30T00:18:50Z    tropomi 5500    NA          <NA>     -180     -85 #>   long.max lat.max #> 1      180      83 #> 2      180      85 #> 3      180      85 #> 4      180      85 #> 5      180      85 #> 6      180      85 #> 7      180      83 #> 8      180      85"},{"path":"https://zivankaraman.github.io/CDSE/articles/CDSE.html","id":"catalog-search","dir":"Articles","previous_headings":"","what":"Catalog search","title":"Using 'Copernicus Data Space Ecosystem' API Wrapper","text":"imagery catalog can searched spatial temporal extent every collection present 'Copernicus Data Space Ecosystem'. spatial filter, can provide either sf sfc object sf package, typically (multi)polygon, describing Area Interest, numeric vector four elements describing bounding box interest. temporal filter, must specify time range either Date character values can converted date .Date function. Open intervals (one side ) can obtained providing NA NULL value corresponding argument. can visualize coverage area interest satellite image tiles plotting footprints available images showing region interest red. Luxembourg image tiles coverage tiles cover small fraction area interest, others cover almost entire area. tile number can obtained image attribute sourceId, explained . can therefore summarize distribution area coverage tile number, see tiles provide best coverage AOI.","code":"dsn <- system.file(\"extdata\", \"luxembourg.geojson\", package = \"CDSE\") aoi <- sf::read_sf(dsn, as_tibble = FALSE) images <- SearchCatalog(aoi = aoi, from = \"2023-07-01\", to = \"2023-07-31\",      collection = \"sentinel-2-l2a\", with_geometry = TRUE, client = OAuthClient) images #> Simple feature collection with 140 features and 11 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 4.357925 ymin: 48.58836 xmax: 7.775117 ymax: 50.54532 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    acquisitionDate tileCloudCover areaCoverage   satellite #> 1       2023-07-31          98.87        1.845 sentinel-2a #> 2       2023-07-31          98.87        1.845 sentinel-2a #> 3       2023-07-31          99.85       20.346 sentinel-2a #> 4       2023-07-31          99.85       20.346 sentinel-2a #> 5       2023-07-31          99.74        5.934 sentinel-2a #> 6       2023-07-31          99.74        5.934 sentinel-2a #> 7       2023-07-31          99.94       16.324 sentinel-2a #> 8       2023-07-31          99.94       16.324 sentinel-2a #> 9       2023-07-31          99.91       92.463 sentinel-2a #> 10      2023-07-31          99.91       92.463 sentinel-2a #>    acquisitionTimestampUTC acquisitionTimestampLocal #> 1      2023-07-31 10:47:29       2023-07-31 12:47:29 #> 2      2023-07-31 10:47:29       2023-07-31 12:47:29 #> 3      2023-07-31 10:47:25       2023-07-31 12:47:25 #> 4      2023-07-31 10:47:25       2023-07-31 12:47:25 #> 5      2023-07-31 10:47:23       2023-07-31 12:47:23 #> 6      2023-07-31 10:47:22       2023-07-31 12:47:22 #> 7      2023-07-31 10:47:14       2023-07-31 12:47:14 #> 8      2023-07-31 10:47:14       2023-07-31 12:47:14 #> 9      2023-07-31 10:47:11       2023-07-31 12:47:11 #> 10     2023-07-31 10:47:11       2023-07-31 12:47:11 #>                                                             sourceId long.min #> 1  S2A_MSIL2A_20230731T103631_N0510_R008_T31UFQ_20241021T055741.SAFE 4.357925 #> 2  S2A_MSIL2A_20230731T103631_N0509_R008_T31UFQ_20230731T202459.SAFE 4.357925 #> 3  S2A_MSIL2A_20230731T103631_N0510_R008_T31UGQ_20241021T055741.SAFE 5.714101 #> 4  S2A_MSIL2A_20230731T103631_N0509_R008_T31UGQ_20230731T202459.SAFE 5.714101 #> 5  S2A_MSIL2A_20230731T103631_N0509_R008_T32ULV_20230731T202459.SAFE 6.230946 #> 6  S2A_MSIL2A_20230731T103631_N0510_R008_T32ULV_20241021T055741.SAFE 6.230946 #> 7  S2A_MSIL2A_20230731T103631_N0510_R008_T31UFR_20241021T055741.SAFE 4.382698 #> 8  S2A_MSIL2A_20230731T103631_N0509_R008_T31UFR_20230731T202459.SAFE 4.382698 #> 9  S2A_MSIL2A_20230731T103631_N0509_R008_T31UGR_20230731T202459.SAFE 5.763559 #> 10 S2A_MSIL2A_20230731T103631_N0510_R008_T31UGR_20241021T055741.SAFE 5.763559 #>     lat.min long.max  lat.max                       geometry #> 1  48.62983 5.904558 49.64443 POLYGON ((4.385187 49.64443... #> 2  48.62983 5.904558 49.64443 POLYGON ((4.385187 49.64443... #> 3  48.58836 7.285031 49.61960 POLYGON ((5.768528 49.6196,... #> 4  48.58836 7.285031 49.61960 POLYGON ((5.768528 49.6196,... #> 5  48.63394 7.762836 49.64597 POLYGON ((6.230946 49.61959... #> 6  48.63394 7.762836 49.64597 POLYGON ((6.230946 49.61959... #> 7  49.52843 5.959371 50.54373 POLYGON ((4.411363 50.54373... #> 8  49.52843 5.959371 50.54373 POLYGON ((4.411363 50.54373... #> 9  49.48563 7.365728 50.51810 POLYGON ((5.820783 50.5181,... #> 10 49.48563 7.365728 50.51810 POLYGON ((5.820783 50.5181,... library(maps) days <- range(as.Date(images$acquisitionDate)) maps::map(database = \"world\", col = \"lightgrey\", fill = TRUE, mar = c(0, 0, 4, 0),     xlim = c(3, 9), ylim = c(47.5, 51.5)) plot(sf::st_geometry(aoi), add = TRUE, col = \"red\", border = FALSE) plot(sf::st_geometry(images), add = TRUE) title(main = sprintf(\"AOI coverage by image tiles for period %s\",      paste(days, collapse = \" / \")), line = 1L, cex.main = 0.75) summary(images$areaCoverage) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   1.845   5.595  15.113  19.758  20.346  92.463 tileNumber <- substring(images$sourceId, 39, 44) by(images$areaCoverage, INDICES = tileNumber, FUN = summary) #> tileNumber: T31UFQ #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   1.845   1.845   1.845   1.845   1.845   1.845  #> ------------------------------------------------------------  #> tileNumber: T31UFR #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   16.32   16.32   16.32   16.32   16.32   16.32  #> ------------------------------------------------------------  #> tileNumber: T31UGQ #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   4.294   4.899  12.706  12.587  20.346  20.346  #> ------------------------------------------------------------  #> tileNumber: T31UGR #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   6.855  15.565  54.299  53.426  92.463  92.463  #> ------------------------------------------------------------  #> tileNumber: T32ULA #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   6.169  14.922  18.814  17.972  22.236  22.236  #> ------------------------------------------------------------  #> tileNumber: T32ULV #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   4.944   5.595   5.819   5.723   5.934   5.934"},{"path":"https://zivankaraman.github.io/CDSE/articles/CDSE.html","id":"catalog-by-season","dir":"Articles","previous_headings":"Catalog search","what":"Catalog by season","title":"Using 'Copernicus Data Space Ecosystem' API Wrapper","text":"Sometimes one can interested given period year, example, images taken summer months (June August). can filter existing image catalog posteriori using SeasonalFilter function. also possible query API directly desired seasonal periods using vectorized version SearchCatalog function. vectorized versions allow running series queries parameter values except either time range, AOI, bounding box parameters, using lapply similar function, thus potentially also using parallel processing.","code":"dsn <- system.file(\"extdata\", \"centralpark.geojson\", package = \"CDSE\") aoi <- sf::read_sf(dsn, as_tibble = FALSE) images <- SearchCatalog(aoi = aoi, from = \"2021-01-01\", to = \"2023-12-31\",      collection = \"sentinel-2-l2a\", with_geometry = FALSE, filter = \"eo:cloud_cover < 5\",      client = OAuthClient) images <- UniqueCatalog(images, by = \"tileCloudCover\") dim(images) #> [1] 81 10 summer_images <- SeasonalFilter(images, from = \"2021-06-01\", to = \"2023-08-31\") dim(summer_images) #> [1] 14 10 dsn <- system.file(\"extdata\", \"centralpark.geojson\", package = \"CDSE\") aoi <- sf::read_sf(dsn, as_tibble = FALSE) seasons <- SeasonalTimerange(from = \"2021-06-01\", to = \"2023-08-31\") lst_summer_images <- lapply(seasons, SearchCatalogByTimerange, aoi = aoi,      collection = \"sentinel-2-l2a\", filter = \"eo:cloud_cover < 5\", with_geometry = FALSE,      client = OAuthClient) summer_images <- do.call(rbind, lst_summer_images) summer_images <- UniqueCatalog(summer_images, by = \"tileCloudCover\") dim(summer_images) #> [1] 14 10 summer_images <- summer_images[rev(order(summer_images$acquisitionDate)), ] row.names(summer_images) <- NULL summer_images #>    acquisitionDate tileCloudCover   satellite acquisitionTimestampUTC #> 1       2023-08-20           0.00 sentinel-2a     2023-08-20 15:51:57 #> 2       2023-07-31           2.53 sentinel-2a     2023-07-31 15:51:56 #> 3       2023-07-26           0.59 sentinel-2b     2023-07-26 15:51:56 #> 4       2023-07-11           4.38 sentinel-2a     2023-07-11 15:51:56 #> 5       2023-06-01           0.00 sentinel-2a     2023-06-01 15:51:54 #> 6       2022-08-25           1.18 sentinel-2a     2022-08-25 15:52:03 #> 7       2022-08-03           4.58 sentinel-2b     2022-08-03 16:01:51 #> 8       2022-07-19           1.37 sentinel-2a     2022-07-19 16:01:58 #> 9       2022-07-11           4.92 sentinel-2b     2022-07-11 15:51:57 #> 10      2022-06-19           1.91 sentinel-2a     2022-06-19 16:01:58 #> 11      2022-06-06           0.99 sentinel-2a     2022-06-06 15:51:58 #> 12      2022-06-04           2.76 sentinel-2b     2022-06-04 16:01:47 #> 13      2021-06-16           4.74 sentinel-2b     2021-06-16 15:51:51 #> 14      2021-06-06           0.38 sentinel-2b     2021-06-06 15:51:52 #>    acquisitionTimestampLocal #> 1        2023-08-20 11:51:57 #> 2        2023-07-31 11:51:56 #> 3        2023-07-26 11:51:56 #> 4        2023-07-11 11:51:56 #> 5        2023-06-01 11:51:54 #> 6        2022-08-25 11:52:03 #> 7        2022-08-03 12:01:51 #> 8        2022-07-19 12:01:58 #> 9        2022-07-11 11:51:57 #> 10       2022-06-19 12:01:58 #> 11       2022-06-06 11:51:58 #> 12       2022-06-04 12:01:47 #> 13       2021-06-16 11:51:51 #> 14       2021-06-06 11:51:52 #>                                                             sourceId  long.min #> 1  S2A_MSIL2A_20230820T153821_N0510_R011_T18TWL_20241015T130941.SAFE -74.89340 #> 2  S2A_MSIL2A_20230731T155141_N0510_R011_T18TWL_20240820T212405.SAFE -74.88632 #> 3  S2B_MSIL2A_20230726T153819_N0510_R011_T18TWL_20240819T050747.SAFE -74.88431 #> 4  S2A_MSIL2A_20230711T153821_N0510_R011_T18TWL_20241019T212830.SAFE -74.88773 #> 5  S2A_MSIL2A_20230601T155141_N0509_R011_T18TWL_20230601T220554.SAFE -74.89199 #> 6  S2A_MSIL2A_20220825T155151_N0510_R011_T18TWL_20240630T134356.SAFE -74.89577 #> 7  S2B_MSIL2A_20220803T154819_N0510_R054_T18TWL_20240715T195039.SAFE -75.00023 #> 8  S2A_MSIL2A_20220719T154951_N0510_R054_T18TWL_20240705T002349.SAFE -75.00023 #> 9  S2B_MSIL2A_20220711T153819_N0510_R011_T18TWL_20240620T183156.SAFE -74.88525 #> 10 S2A_MSIL2A_20220619T154821_N0510_R054_T18TWL_20240701T042207.SAFE -75.00023 #> 11 S2A_MSIL2A_20220606T153821_N0510_R011_T18TWL_20240714T132919.SAFE -74.88136 #> 12 S2B_MSIL2A_20220604T154809_N0510_R054_T18TWL_20240619T142906.SAFE -75.00023 #> 13 S2B_MSIL2A_20210616T153809_N0500_R011_T18TWL_20230131T171455.SAFE -74.88136 #> 14 S2B_MSIL2A_20210606T153809_N0500_R011_T18TWL_20230603T225907.SAFE -74.88277 #>     lat.min  long.max  lat.max #> 1  40.55548 -73.68381 41.55110 #> 2  40.55548 -73.68381 41.55107 #> 3  40.55548 -73.68381 41.55107 #> 4  40.55548 -73.68381 41.55108 #> 5  40.55548 -73.68381 41.55109 #> 6  40.55548 -73.68381 41.55111 #> 7  40.55820 -73.68381 41.55184 #> 8  40.55819 -73.68381 41.55184 #> 9  40.55550 -73.69200 41.35177 #> 10 40.55681 -73.68381 41.55184 #> 11 40.55548 -73.68381 41.55105 #> 12 40.55781 -73.68381 41.55184 #> 13 40.55548 -73.68381 41.55106 #> 14 40.55548 -73.68381 41.55106"},{"path":"https://zivankaraman.github.io/CDSE/articles/CDSE.html","id":"evalscripts","dir":"Articles","previous_headings":"","what":"Evalscripts","title":"Using 'Copernicus Data Space Ecosystem' API Wrapper","text":"shall see examples , functions operate remotely sensed spectral band values, GetImage GetStatistics, require evalscript passed script argument. evalscript (“custom script”) piece JavaScript code defines satellite data shall processed API values service shall return. required part request involving data processing, retrieving image area interest computing statistical values given period time. evaluation scripts can use JavaScript function language structures, along certain utility functions provided API user convenience. Chrome V8 JavaScript engine used running evalscripts. evaluation scripts passed script argument GetImage, GetStatistics, functions require evalscript. either character string containing evaluation script name file containing script. Although beyond scope document provide detailed guidance writing evalscripts, shall provide tips can help use mentioned functions without deep understanding evalscripts’ internal workings. encourage users wish acquire deeper knowledge evalscripts consult API Beginners Guide Evalscript (custom script) documentation. can also find large collection custom scripts can readily use repository.","code":""},{"path":"https://zivankaraman.github.io/CDSE/articles/CDSE.html","id":"built-in-scripts","dir":"Articles","previous_headings":"Evalscripts","what":"Built-in scripts","title":"Using 'Copernicus Data Space Ecosystem' API Wrapper","text":"scripts folder package contains examples evaluation scripts. limited, number scope, main purpose provide scripts used documentation examples. can, course, use starting point develop scripts applying relatively simple modifications (example, starting NDVI script, replacing bands B04 B08 bands B8A B11 give script NDMI - Normalized Difference Moisture Index).","code":""},{"path":"https://zivankaraman.github.io/CDSE/articles/CDSE.html","id":"ready-to-use-examples","dir":"Articles","previous_headings":"Evalscripts","what":"Ready-to-use examples","title":"Using 'Copernicus Data Space Ecosystem' API Wrapper","text":"large collection evalscripts can readily use available repository. scripts grouped satellite constellation (Sentinel-1, Sentinel-2, …) application field (Agriculture, Disaster management, Urban planning, …). use one scripts, simplest way probably use “Download code” “Copy code” icons upper right corner code window (see illustration ). indices come several flavours (Visualisation vs. Raw Values); select one corresponds situation. want analysis images, use raw values; want simply display image, can use visualisation version (probably also export result JPEG PNG file). can, course, always get raw values customise visualisation R code. indices might one version; likely first compute index value possibly transform visualisation - adapt based needs. Note: repository also contains scripts satellite collections available CDSE.","code":""},{"path":"https://zivankaraman.github.io/CDSE/articles/CDSE.html","id":"awesome-spectral-indices","dir":"Articles","previous_headings":"Evalscripts","what":"Awesome Spectral Indices","title":"Using 'Copernicus Data Space Ecosystem' API Wrapper","text":"‘Awesome Spectral Indices’ (ASI) standardized, machine-readable catalogue spectral indices used remote sensing Earth Observation. currently includes 240 spectral indices grouped eight application domains: vegetation, water, burn, snow, soil, urban, radar, kernel indices. spectral index ASI comes set attributes short long name, application domain, formula, required bands, platforms, references, date addition, contributor information. R package rsi implements interface ASI collection, providing list indices directly R friendly data.frame (actually tibble). indices can now directly used ‘CDSE’ package provide evalscript functions require one. purpose, developed MakeEvalScript function generate script based information contained data.frame spectral indices produced rsi::spectral_indices(). example showing works. value returned function character vector element representing one line script. can best visualise script code cat(gdvi_script, sep = \"\\n\"), save file later use cat(gdvi_script, file = \"GDVI.js\", sep = \"\\n\"). use generated script directly function, use something like GetImage(..., script = paste(gdvi_script, collapse = \"\\n\"), ...). package rsi installed, can use shortcut just provide short_name index first argument (instead one-row data.frame). Please note short_name case-sensitive, although names full upper-case . course still provide additional arguments, required, usual way. example: Finally, can also define ad-hoc custom indices providing one-row data.frame crafted model produced rsi::spectral_indices(). Please ensure respect correct formatting, particularly writing formula. Since function use attributes spectral indices just bands, formula, platform optionally long_name (used comment header script), can provide information, even data.frame, simple list . shall illustrate example. Since ASI spectral indices collection rich, rather recreating already existing index creating completely dummy ad-hoc index, shall use transformation RGB image greyscale image, based code, strictly speaking might spectral index, can illustrate process. can now compare greyscale RGB images.  Caveats: Kernel Spectral Indices used context fit API model (operate directly raw spectral bands). indices available Sentinel-1 Sentinel-2 platforms used, Sentinel collections available CDSE API.","code":"si <- rsi::spectral_indices() # get spectral indices # NDVI ndvi <- subset(si, short_name == \"NDVI\") # creates one-row data.frame ndvi_script <- MakeEvalScript(ndvi) # generates the script # GDVI gdvi <- subset(si, short_name == \"GDVI\") # creates one-row data.frame # GDVI requires an extra argument provided by the user gdvi_script <- MakeEvalScript(gdvi, nexp = 2) # generates the script gdvi_script <- MakeEvalScript(\"GDVI\", nexp = 2) custom_def <- list(bands = c(\"R\", \"G\", \"B\"),                    formula = \"0.3 * R + 0.59 * G + 0.11 * B\",                    # long_name = \"Greyscale image\",                    platforms = \"Sentinel-2\") custom_script <- paste(MakeEvalScript(custom_def), collapse = \"\\n\") # select the day with smallest cloud cover dsn <- system.file(\"extdata\", \"centralpark.geojson\", package = \"CDSE\") aoi <- sf::read_sf(dsn, as_tibble = FALSE) images <- SearchCatalog(aoi = aoi, from = \"2023-06-01\", to = \"2023-08-31\",                         collection = \"sentinel-2-l2a\", with_geometry = TRUE,                         client = OAuthClient) day <- images[order(images$tileCloudCover), ][[\"acquisitionDate\"]][1] # get the greyscale image grey_file <- file.path(tempdir(), \"grey.tif\") GetImage(bbox = sf::st_bbox(aoi), time_range = day, script = custom_script, file = grey_file,          collection = \"sentinel-2-l2a\", format = \"image/tiff\",          mosaicking_order = \"leastCC\", resolution = 20,          mask = FALSE, buffer = 100, client = OAuthClient) # get the RGB image script_file <- system.file(\"scripts\", \"TrueColorS2L2A.js\", package = \"CDSE\") rgb_file <- file.path(tempdir(), \"rgb.tif\") GetImage(bbox = sf::st_bbox(aoi), time_range = day, script = script_file, file = rgb_file,          collection = \"sentinel-2-l2a\", format = \"image/tiff\",          mosaicking_order = \"leastCC\", resolution = 20,          mask = FALSE, buffer = 100, client = OAuthClient) # Import the rasters rgb_img <- terra::rast(rgb_file) grey_img <- terra::rast(grey_file) # Rescale greyscale raster values to 0 - 1 range mM <- terra::minmax(grey_img) grey_img <- (grey_img - mM[1])/(mM[2] - mM[1]) # Set up plotting window for side-by-side display old.par <- par(mfrow = c(1, 2)) # Plot RGB image plotRGB(rgb_img)   # expects layers 1,2,3 as R,G,B # Plot greyscale image plot(grey_img, col = grey.colors(256, start = 0, end = 1), legend = FALSE, axes = FALSE, mar = 0)"},{"path":[]},{"path":"https://zivankaraman.github.io/CDSE/articles/CDSE.html","id":"retrieving-aoi-satellite-image-as-a-raster-object","dir":"Articles","previous_headings":"Retrieving images","what":"Retrieving AOI satellite image as a raster object","title":"Using 'Copernicus Data Space Ecosystem' API Wrapper","text":"One important features API ability extract part images covering area interest. AOI small example , significant gain efficiency (download, local processing) compared getting whole tile image processing locally. area small, systematically fully covered available images. shall select date least cloud cover, retrieve NDVI values SpatRaster package terra. allows processing data, shown replacing negative values zero. size pixels specified directly resolution argument. also adding 100-meter buffer around area interest masking pixels outside AOI. Central Park NDVI raster","code":"dsn <- system.file(\"extdata\", \"centralpark.geojson\", package = \"CDSE\") aoi <- sf::read_sf(dsn, as_tibble = FALSE) images <- SearchCatalog(aoi = aoi, from = \"2021-05-01\", to = \"2021-05-31\",      collection = \"sentinel-2-l2a\", with_geometry = TRUE, client = OAuthClient) images #> Simple feature collection with 12 features and 11 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -75.00023 ymin: 40.55548 xmax: -73.68381 ymax: 41.55184 #> Geodetic CRS:  WGS 84 #> First 10 features: #>    acquisitionDate tileCloudCover areaCoverage   satellite #> 1       2021-05-30         100.00          100 sentinel-2b #> 2       2021-05-27          16.26          100 sentinel-2b #> 3       2021-05-25          26.47          100 sentinel-2a #> 4       2021-05-22         100.00          100 sentinel-2a #> 5       2021-05-20          24.31          100 sentinel-2b #> 6       2021-05-17           7.17          100 sentinel-2b #> 7       2021-05-15          28.17          100 sentinel-2a #> 8       2021-05-12           1.35          100 sentinel-2a #> 9       2021-05-10          92.67          100 sentinel-2b #> 10      2021-05-07          89.62          100 sentinel-2b #>    acquisitionTimestampUTC acquisitionTimestampLocal #> 1      2021-05-30 16:01:47       2021-05-30 12:01:47 #> 2      2021-05-27 15:51:51       2021-05-27 11:51:51 #> 3      2021-05-25 16:01:47       2021-05-25 12:01:47 #> 4      2021-05-22 15:51:51       2021-05-22 11:51:51 #> 5      2021-05-20 16:01:47       2021-05-20 12:01:47 #> 6      2021-05-17 15:51:50       2021-05-17 11:51:50 #> 7      2021-05-15 16:01:47       2021-05-15 12:01:47 #> 8      2021-05-12 15:51:50       2021-05-12 11:51:50 #> 9      2021-05-10 16:01:45       2021-05-10 12:01:45 #> 10     2021-05-07 15:51:48       2021-05-07 11:51:48 #>                                                             sourceId  long.min #> 1  S2B_MSIL2A_20210530T154809_N0500_R054_T18TWL_20230219T165456.SAFE -75.00023 #> 2  S2B_MSIL2A_20210527T153809_N0500_R011_T18TWL_20230603T173050.SAFE -74.88348 #> 3  S2A_MSIL2A_20210525T154911_N0500_R054_T18TWL_20230208T124728.SAFE -75.00023 #> 4  S2A_MSIL2A_20210522T153911_N0500_R011_T18TWL_20230604T065046.SAFE -74.87781 #> 5  S2B_MSIL2A_20210520T154809_N0500_R054_T18TWL_20230219T225246.SAFE -75.00023 #> 6  S2B_MSIL2A_20210517T153809_N0500_R011_T18TWL_20230603T145938.SAFE -74.88206 #> 7  S2A_MSIL2A_20210515T154911_N0500_R054_T18TWL_20230206T101926.SAFE -75.00023 #> 8  S2A_MSIL2A_20210512T153911_N0500_R011_T18TWL_20230604T080336.SAFE -74.87710 #> 9  S2B_MSIL2A_20210510T154809_N0500_R054_T18TWL_20230208T070834.SAFE -75.00023 #> 10 S2B_MSIL2A_20210507T153809_N0500_R011_T18TWL_20230604T114048.SAFE -74.87639 #>     lat.min  long.max  lat.max                       geometry #> 1  40.55822 -73.68381 41.55184 POLYGON ((-75.00023 41.5518... #> 2  40.55548 -73.68381 41.55106 POLYGON ((-74.57884 41.5510... #> 3  40.55811 -73.68381 41.55184 POLYGON ((-75.00023 41.5518... #> 4  40.55548 -73.68381 41.55104 POLYGON ((-74.57309 41.5510... #> 5  40.55775 -73.68381 41.55184 POLYGON ((-75.00023 41.5518... #> 6  40.55548 -73.68381 41.55106 POLYGON ((-74.57668 41.5510... #> 7  40.55775 -73.68381 41.55184 POLYGON ((-75.00023 41.5518... #> 8  40.55548 -73.68381 41.55104 POLYGON ((-74.57165 41.5510... #> 9  40.55815 -73.68381 41.55184 POLYGON ((-75.00023 41.5518... #> 10 40.55548 -73.68381 41.55103 POLYGON ((-74.57021 41.5510... summary(images$areaCoverage) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>     100     100     100     100     100     100 day <- images[order(images$tileCloudCover), ]$acquisitionDate[1] script_file <- system.file(\"scripts\", \"NDVI_float32.js\", package = \"CDSE\") ras <- GetImage(aoi = aoi, time_range = day, script = script_file,      collection = \"sentinel-2-l2a\", format = \"image/tiff\", mosaicking_order = \"leastCC\",      resolution = 10, mask = TRUE, buffer = 100, client = OAuthClient) ras #> class       : SpatRaster  #> dimensions  : 383, 355, 1  (nrow, ncol, nlyr) #> resolution  : 0.0001003292, 0.0001003292  (x, y) #> extent      : -73.98355, -73.94794, 40.76322, 40.80165  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  #> source(s)   : memory #> name        : file934759f9d7a2  #> min value   :       -0.5069648  #> max value   :        0.9507549 ras[ras < 0] <- 0 terra::plot(ras, main = paste(\"Central Park NDVI on\", day), cex.main = 0.75,     col = colorRampPalette(c(\"darkred\", \"yellow\", \"darkgreen\"))(99))"},{"path":"https://zivankaraman.github.io/CDSE/articles/CDSE.html","id":"retrieving-aoi-satellite-image-as-an-image-file","dir":"Articles","previous_headings":"Retrieving images","what":"Retrieving AOI satellite image as an image file","title":"Using 'Copernicus Data Space Ecosystem' API Wrapper","text":"don’t want process satellite image locally simply use image file (include report Web page, example), can use appropriate script render three-band raster RGB layers (one black--white image). specify area interest bounding box instead exact geometry. also demonstrate evaluation script can passed single character string, provide number pixels output image rather size individual pixels - makes sense image intended display processing. Central Park image PNG file","code":"bbox <- as.numeric(sf::st_bbox(aoi)) script_text <- paste(readLines(system.file(\"scripts\", \"TrueColorS2L2A.js\",      package = \"CDSE\")), collapse = \"\\n\") cat(c(readLines(system.file(\"scripts\", \"TrueColorS2L2A.js\", package = \"CDSE\"), n = 15),      \"...\"), sep = \"\\n\") #> //VERSION=3 #> //Optimized Sentinel-2 L2A True Color #>  #> function setup() { #>   return { #>     input: [\"B04\", \"B03\", \"B02\", \"dataMask\"], #>     output: { bands: 4 } #>   }; #> } #>  #> function evaluatePixel(smp) { #>   const rgbLin = satEnh(sAdj(smp.B04), sAdj(smp.B03), sAdj(smp.B02)); #>   return [sRGB(rgbLin[0]), sRGB(rgbLin[1]), sRGB(rgbLin[2]), smp.dataMask]; #> } #>  #> ... png <- tempfile(\"img\", fileext = \".png\") GetImage(bbox = bbox, time_range = day, script = script_text,      collection = \"sentinel-2-l2a\", file = png, format = \"image/png\", buffer = 100,     mosaicking_order = \"leastCC\", pixels = c(600, 950), client = OAuthClient) terra::plotRGB(terra::flip(terra::rast(png), direction = \"vertical\"))"},{"path":"https://zivankaraman.github.io/CDSE/articles/CDSE.html","id":"retrieving-a-series-of-images-in-a-batch","dir":"Articles","previous_headings":"Retrieving images","what":"Retrieving a series of images in a batch","title":"Using 'Copernicus Data Space Ecosystem' API Wrapper","text":"often happens one interested acquiring series images particular zone (AOI bounding box) several dates, images different areas interest date (probably located close visited day). GetImageBy* functions (GetImageByTimerange, GetImageByAOI, GetImageByBbox) facilitate task specifically crafted called lapply-like function, thus potentially executed parallel. shall illustrate example. Central Park monthly NDVI particular example, parallelisation necessarily beneficial retrieving 12 images, large number images, can significantly reduce execution time. Also note used filter argument SearchCatalog function limit list images tiles cloud cover < 5%.","code":"dsn <- system.file(\"extdata\", \"centralpark.geojson\", package = \"CDSE\") aoi <- sf::read_sf(dsn, as_tibble = FALSE) images <- SearchCatalog(aoi = aoi, from = \"2022-01-01\", to = \"2022-12-31\",                         collection = \"sentinel-2-l2a\", with_geometry = TRUE,                          filter = \"eo:cloud_cover < 5\", client = OAuthClient) # Get the day with the minimal cloud cover for every month ----------------------------- tmp1 <- images[, c(\"tileCloudCover\", \"acquisitionDate\")] tmp1$month <- lubridate::month(images$acquisitionDate) agg1 <- stats::aggregate(tileCloudCover ~ month, data = tmp1, FUN = min) tmp2 <- merge.data.frame(agg1, tmp1, by = c(\"month\", \"tileCloudCover\"), sort = FALSE) # in case of ties, get an arbitrary date (here the smallest acquisitionDate,  # could also be the biggest) agg2 <- stats::aggregate(acquisitionDate ~ month, data = tmp2, FUN = min) monthly <- merge.data.frame(agg2, tmp2, by = c(\"acquisitionDate\", \"month\"), sort = FALSE) days <- monthly$acquisitionDate # Retrieve images in parallel ---------------------------------------------------------- script_file <- system.file(\"scripts\", \"NDVI_float32.js\", package = \"CDSE\") tmp_folder <- tempfile(\"dir\") if (!dir.exists(tmp_folder)) dir.create(tmp_folder) cl <- parallel::makeCluster(4) ans <- parallel::clusterExport(cl, list(\"tmp_folder\"), envir = environment()) ans <- parallel::clusterEvalQ(cl, {library(CDSE)}) lstRast <- parallel::parLapply(cl, days, fun = function(x, ...) {     GetImageByTimerange(x, file = sprintf(\"%s/img_%s.tiff\", tmp_folder, x), ...)},     aoi = aoi, collection = \"sentinel-2-l2a\", script = script_file,     format = \"image/tiff\", mosaicking_order = \"mostRecent\", resolution = 10,     buffer = 0, mask = TRUE, client = OAuthClient) parallel::stopCluster(cl) # Plot the images ---------------------------------------------------------------------- par(mfrow = c(3, 4)) ans <- sapply(seq_along(days), FUN = function(i) {     ras <- terra::rast(lstRast[[i]])     day <- days[i]     ras[ras < 0] <- 0     terra::plot(ras, main = paste(\"Central Park NDVI on\", day), range = c(0, 1),         cex.main = 0.7, pax = list(cex.axis = 0.5), plg = list(cex = 0.5),         col = colorRampPalette(c(\"darkred\", \"yellow\", \"darkgreen\"))(99))     })"},{"path":"https://zivankaraman.github.io/CDSE/articles/CDSE.html","id":"retrieving-statistics","dir":"Articles","previous_headings":"","what":"Retrieving statistics","title":"Using 'Copernicus Data Space Ecosystem' API Wrapper","text":"interested calculating average value (statistic) index just raw band values, Statistical API enables get statistics calculated based satellite imagery without download images. need specify area interest, time period, evalscript, statistical measures calculated. requested statistics returned data.frame list.","code":""},{"path":"https://zivankaraman.github.io/CDSE/articles/CDSE.html","id":"statistical-evalscripts","dir":"Articles","previous_headings":"Retrieving statistics","what":"Statistical evalscripts","title":"Using 'Copernicus Data Space Ecosystem' API Wrapper","text":"general rules building evalscripts apply. However, specifics using evalscripts Statistical API: evaluatePixel() function must, addition output, always return also dataMask output. output defines pixels excluded calculations. details example, see . default value sampleType FLOAT32. output.bands parameter setup() function can array. makes possible specify custom names output bands different output dataMask different outputs. noted scripts generated MakeEvalScript function can directly used retrieve statistical values.","code":""},{"path":"https://zivankaraman.github.io/CDSE/articles/CDSE.html","id":"retrieving-simple-statistics","dir":"Articles","previous_headings":"Retrieving statistics","what":"Retrieving simple statistics","title":"Using 'Copernicus Data Space Ecosystem' API Wrapper","text":"Besides time range, specify way want values aggregated time. use aggregation_period aggregation_unit arguments. aggregation_unit must one day, week, month year, aggregation_period providing number aggregation_units (days, weeks, …) statistics calculated. default values “1” “day”, producing daily statistics. last interval given time range isn’t divisible provided aggregation interval, can skip last interval (default behavior), shorten last interval ends end provided time range, extend last interval end provided time range intervals equal duration. controlled value lastIntervalBehavior argument. example demonstrated week can specified either 7 days 1 week.","code":"dsn <- system.file(\"extdata\", \"centralpark.geojson\", package = \"CDSE\") aoi <- sf::read_sf(dsn, as_tibble = FALSE) script_file <- system.file(\"scripts\", \"NDVI_CLOUDS_STAT.js\", package = \"CDSE\") daily_stats <- GetStatistics(aoi = aoi, time_range = c(\"2023-07-01\", \"2023-07-31\"),     collection = \"sentinel-2-l2a\", script = script_file, mosaicking_order = \"leastCC\",     resolution = 100, aggregation_period = 1, client = OAuthClient) weekly_stats <- GetStatistics(aoi = aoi, time_range = c(\"2023-07-01\", \"2023-07-31\"),     collection = \"sentinel-2-l2a\", script = script_file, mosaicking_order = \"leastCC\",     resolution = 100, aggregation_period = 7, client = OAuthClient) weekly_stats_extended <- GetStatistics(aoi = aoi,      time_range = c(\"2023-07-01\", \"2023-07-31\"), collection = \"sentinel-2-l2a\",      script = script_file, mosaicking_order = \"leastCC\", resolution = 100,      aggregation_period = 1, aggregation_unit = \"w\", lastIntervalBehavior = \"EXTEND\",      client = OAuthClient) daily_stats #>          date     output        band          min        mean          max #> 1  2023-07-01 statistics  ndvi_value  0.000000000  0.29693709   0.78141010 #> 2  2023-07-01 statistics cloud_cover  0.000000000 11.49759615  59.00000000 #> 3  2023-07-04 statistics  ndvi_value  0.000000000  0.00130794   0.08091214 #> 4  2023-07-04 statistics cloud_cover 65.000000000 65.00000000  65.00000000 #> 5  2023-07-06 statistics  ndvi_value  0.000000000  0.59277750   0.94132596 #> 6  2023-07-06 statistics cloud_cover  0.000000000  0.03125000   1.00000000 #> 7  2023-07-09 statistics  ndvi_value  0.009024903  0.01435550   0.01816181 #> 8  2023-07-09 statistics cloud_cover 65.000000000 65.00000000  65.00000000 #> 9  2023-07-11 statistics  ndvi_value  0.000000000  0.58623717   0.92305928 #> 10 2023-07-11 statistics cloud_cover  0.000000000  0.03846154   1.00000000 #> 11 2023-07-14 statistics  ndvi_value  0.000000000  0.56409693   0.97042620 #> 12 2023-07-14 statistics cloud_cover  0.000000000  1.11778846  44.00000000 #> 13 2023-07-16 statistics  ndvi_value  0.000000000  0.02039137   0.04840916 #> 14 2023-07-16 statistics cloud_cover 65.000000000 73.26442308 100.00000000 #> 15 2023-07-19 statistics  ndvi_value  0.000000000  0.00000000   0.00000000 #> 16 2023-07-19 statistics cloud_cover 65.000000000 65.00000000  65.00000000 #> 17 2023-07-21 statistics  ndvi_value  0.000000000  0.34102285   0.87586755 #> 18 2023-07-21 statistics cloud_cover  0.000000000 18.92067308 100.00000000 #> 19 2023-07-24 statistics  ndvi_value  0.000000000  0.31690014   0.68750000 #> 20 2023-07-24 statistics cloud_cover  0.000000000  7.19230769  65.00000000 #> 21 2023-07-26 statistics  ndvi_value  0.000000000  0.55108924   0.86418003 #> 22 2023-07-26 statistics cloud_cover  0.000000000  0.03846154   2.00000000 #> 23 2023-07-29 statistics  ndvi_value  0.000000000  0.36109372   0.82380843 #> 24 2023-07-29 statistics cloud_cover  0.000000000 14.87500000  65.00000000 #> 25 2023-07-31 statistics  ndvi_value  0.000000000  0.57417085   0.90863669 #> 26 2023-07-31 statistics cloud_cover  0.000000000  0.05528846  11.00000000 #>           stDev sampleCount noDataCount #> 1   0.202025826        1120         704 #> 2  16.430652463        1120         704 #> 3   0.007348936        1120         704 #> 4   0.000000000        1120         704 #> 5   0.314693450        1120         704 #> 6   0.173992636        1120         704 #> 7   0.001601320        1120         704 #> 8   0.000000000        1120         704 #> 9   0.307616006        1120         704 #> 10  0.192307692        1120         704 #> 11  0.313581645        1120         704 #> 12  4.049343598        1120         704 #> 13  0.006433569        1120         704 #> 14 14.578444429        1120         704 #> 15  0.000000000        1120         704 #> 16  0.000000000        1120         704 #> 17  0.237646086        1120         704 #> 18 27.417550449        1120         704 #> 19  0.187236765        1120         704 #> 20 14.153401958        1120         704 #> 21  0.282648355        1120         704 #> 22  0.204425881        1120         704 #> 23  0.236225583        1120         704 #> 24 21.364594858        1120         704 #> 25  0.300636446        1120         704 #> 26  0.575393606        1120         704 weekly_stats #>         from         to     output        band min        mean         max #> 1 2023-07-01 2023-07-07 statistics  ndvi_value   0  0.59277750   0.9413260 #> 2 2023-07-01 2023-07-07 statistics cloud_cover   0  0.03125000   1.0000000 #> 3 2023-07-08 2023-07-14 statistics  ndvi_value   0  0.58623717   0.9230593 #> 4 2023-07-08 2023-07-14 statistics cloud_cover   0  0.03846154   1.0000000 #> 5 2023-07-15 2023-07-21 statistics  ndvi_value   0  0.34102285   0.8758675 #> 6 2023-07-15 2023-07-21 statistics cloud_cover   0 18.92067308 100.0000000 #> 7 2023-07-22 2023-07-28 statistics  ndvi_value   0  0.55108924   0.8641800 #> 8 2023-07-22 2023-07-28 statistics cloud_cover   0  0.03846154   2.0000000 #>        stDev sampleCount noDataCount #> 1  0.3146934        1120         704 #> 2  0.1739926        1120         704 #> 3  0.3076160        1120         704 #> 4  0.1923077        1120         704 #> 5  0.2376461        1120         704 #> 6 27.4175504        1120         704 #> 7  0.2826484        1120         704 #> 8  0.2044259        1120         704 weekly_stats_extended #>          from         to     output        band min        mean         max #> 1  2023-07-01 2023-07-07 statistics  ndvi_value   0  0.59277750   0.9413260 #> 2  2023-07-01 2023-07-07 statistics cloud_cover   0  0.03125000   1.0000000 #> 3  2023-07-08 2023-07-14 statistics  ndvi_value   0  0.58623717   0.9230593 #> 4  2023-07-08 2023-07-14 statistics cloud_cover   0  0.03846154   1.0000000 #> 5  2023-07-15 2023-07-21 statistics  ndvi_value   0  0.34102285   0.8758675 #> 6  2023-07-15 2023-07-21 statistics cloud_cover   0 18.92067308 100.0000000 #> 7  2023-07-22 2023-07-28 statistics  ndvi_value   0  0.55108924   0.8641800 #> 8  2023-07-22 2023-07-28 statistics cloud_cover   0  0.03846154   2.0000000 #> 9  2023-07-29 2023-08-04 statistics  ndvi_value   0  0.57417085   0.9086367 #> 10 2023-07-29 2023-08-04 statistics cloud_cover   0  0.05528846  11.0000000 #>         stDev sampleCount noDataCount #> 1   0.3146934        1120         704 #> 2   0.1739926        1120         704 #> 3   0.3076160        1120         704 #> 4   0.1923077        1120         704 #> 5   0.2376461        1120         704 #> 6  27.4175504        1120         704 #> 7   0.2826484        1120         704 #> 8   0.2044259        1120         704 #> 9   0.3006364        1120         704 #> 10  0.5753936        1120         704"},{"path":"https://zivankaraman.github.io/CDSE/articles/CDSE.html","id":"retrieving-statistics-with-percentiles","dir":"Articles","previous_headings":"Retrieving statistics","what":"Retrieving statistics with percentiles","title":"Using 'Copernicus Data Space Ecosystem' API Wrapper","text":"Besides basic statistics (min, max, mean, stDev), one can also request compute percentiles. percentiles requested 25, 50, 75, corresponding output renamed ‘q1’, ‘median’, ‘q3’.","code":"daily_stats <- GetStatistics(aoi = aoi, time_range = c(\"2023-07-01\", \"2023-07-31\"),     collection = \"sentinel-2-l2a\", script = script_file, mosaicking_order = \"leastCC\",     resolution = 100, aggregation_period = 1, percentiles = c(25, 50, 75),      client = OAuthClient) head(daily_stats, n = 10) #>          date     output        band          min          q1      median #> 1  2023-07-01 statistics  ndvi_value  0.000000000  0.13500306  0.27183646 #> 2  2023-07-01 statistics cloud_cover  0.000000000  0.00000000  0.00000000 #> 3  2023-07-04 statistics  ndvi_value  0.000000000  0.00000000  0.00000000 #> 4  2023-07-04 statistics cloud_cover 65.000000000 65.00000000 65.00000000 #> 5  2023-07-06 statistics  ndvi_value  0.000000000  0.40708151  0.72846061 #> 6  2023-07-06 statistics cloud_cover  0.000000000  0.00000000  0.00000000 #> 7  2023-07-09 statistics  ndvi_value  0.009024903  0.01335559  0.01449275 #> 8  2023-07-09 statistics cloud_cover 65.000000000 65.00000000 65.00000000 #> 9  2023-07-11 statistics  ndvi_value  0.000000000  0.39752251  0.72366148 #> 10 2023-07-11 statistics cloud_cover  0.000000000  0.00000000  0.00000000 #>           mean          q3         max        stDev sampleCount noDataCount #> 1   0.29693709  0.46695372  0.78141010  0.202025826        1120         704 #> 2  11.49759615 27.00000000 59.00000000 16.430652463        1120         704 #> 3   0.00130794  0.00000000  0.08091214  0.007348936        1120         704 #> 4  65.00000000 65.00000000 65.00000000  0.000000000        1120         704 #> 5   0.59277750  0.83494651  0.94132596  0.314693450        1120         704 #> 6   0.03125000  0.00000000  1.00000000  0.173992636        1120         704 #> 7   0.01435550  0.01541287  0.01816181  0.001601320        1120         704 #> 8  65.00000000 65.00000000 65.00000000  0.000000000        1120         704 #> 9   0.58623717  0.82233500  0.92305928  0.307616006        1120         704 #> 10  0.03846154  0.00000000  1.00000000  0.192307692        1120         704 weekly_stats <- GetStatistics(aoi = aoi, time_range = c(\"2023-07-01\", \"2023-07-31\"),     collection = \"sentinel-2-l2a\", script = script_file, mosaicking_order = \"leastCC\",     resolution = 100, aggregation_period = 7, percentiles = seq(10, 90, by = 10),      client = OAuthClient) head(weekly_stats, n = 10) #>         from         to     output        band min     P.10.0    P.20.0 #> 1 2023-07-01 2023-07-07 statistics  ndvi_value   0 0.00000000 0.2409204 #> 2 2023-07-01 2023-07-07 statistics cloud_cover   0 0.00000000 0.0000000 #> 3 2023-07-08 2023-07-14 statistics  ndvi_value   0 0.00000000 0.2461283 #> 4 2023-07-08 2023-07-14 statistics cloud_cover   0 0.00000000 0.0000000 #> 5 2023-07-15 2023-07-21 statistics  ndvi_value   0 0.03198843 0.1107902 #> 6 2023-07-15 2023-07-21 statistics cloud_cover   0 0.00000000 0.0000000 #> 7 2023-07-22 2023-07-28 statistics  ndvi_value   0 0.00000000 0.2372815 #> 8 2023-07-22 2023-07-28 statistics cloud_cover   0 0.00000000 0.0000000 #>      P.30.0    P.40.0    P.50.0        mean     P.60.0     P.70.0     P.80.0 #> 1 0.5346097 0.6485005 0.7284606  0.59277750  0.7729769  0.8137387  0.8501548 #> 2 0.0000000 0.0000000 0.0000000  0.03125000  0.0000000  0.0000000  0.0000000 #> 3 0.5303805 0.6513962 0.7236615  0.58623717  0.7651967  0.7999074  0.8342828 #> 4 0.0000000 0.0000000 0.0000000  0.03846154  0.0000000  0.0000000  0.0000000 #> 5 0.1835373 0.2423687 0.3113911  0.34102285  0.3892109  0.4739323  0.5801266 #> 6 0.0000000 2.0000000 4.0000000 18.92067308 10.0000000 23.0000000 36.0000000 #> 7 0.5198822 0.6117556 0.6803387  0.55108924  0.7165049  0.7446924  0.7765798 #> 8 0.0000000 0.0000000 0.0000000  0.03846154  0.0000000  0.0000000  0.0000000 #>       P.90.0         max      stDev sampleCount noDataCount #> 1  0.8888350   0.9413260  0.3146934        1120         704 #> 2  0.0000000   1.0000000  0.1739926        1120         704 #> 3  0.8731361   0.9230593  0.3076160        1120         704 #> 4  0.0000000   1.0000000  0.1923077        1120         704 #> 5  0.6991727   0.8758675  0.2376461        1120         704 #> 6 61.0000000 100.0000000 27.4175504        1120         704 #> 7  0.8116835   0.8641800  0.2826484        1120         704 #> 8  0.0000000   2.0000000  0.2044259        1120         704"},{"path":"https://zivankaraman.github.io/CDSE/articles/CDSE.html","id":"retrieving-a-series-of-statistics-in-a-batch","dir":"Articles","previous_headings":"Retrieving statistics","what":"Retrieving a series of statistics in a batch","title":"Using 'Copernicus Data Space Ecosystem' API Wrapper","text":"Just retrieving satellite images, one can interested acquiring series statistics particular zone (AOI bounding box) several dates, statistics different zones periods. GetStatisticsBy* functions (GetStatisticsByTimerange, GetStatisticsByAOI, GetStatisticsByBbox) facilitate task specifically crafted called lapply-like function, thus potentially executed parallel. following example illustrates .","code":"dsn <- system.file(\"extdata\", \"centralpark.geojson\", package = \"CDSE\") aoi <- sf::read_sf(dsn, as_tibble = FALSE) ndvi_script <- paste(MakeEvalScript(     list(         bands = c(\"N\", \"R\"),         formula = \"(N - R)/(N + R)\",         long_name = \"Normalized Difference Vegetation Index\",         platforms = \"Sentinel-2\"     ) ), collapse = \"\\n\") seasons <- SeasonalTimerange(from = \"2020-06-01\", to = \"2023-08-31\") lst_stats <- lapply(seasons, GetStatisticsByTimerange, aoi = aoi,      collection = \"sentinel-2-l2a\", script = ndvi_script, mosaicking_order = \"leastCC\",      resolution = 100, aggregation_period = 7L, client = OAuthClient) weekly_stats <- do.call(rbind, lst_stats) weekly_stats <- weekly_stats[order(weekly_stats$from), ] row.names(weekly_stats) <- NULL head(weekly_stats, n = 5) #>         from         to  output  band min      mean       max     stDev #> 1 2020-06-01 2020-06-07 default index  -1 0.4082754 0.8682218 0.5207691 #> 2 2020-06-08 2020-06-14 default index  -1 0.5388992 0.9431616 0.3889898 #> 3 2020-06-15 2020-06-21 default index  -1 0.5560332 1.0000000 0.5017145 #> 4 2020-06-22 2020-06-28 default index  -1 0.3958983 0.8495593 0.4120251 #> 5 2020-06-29 2020-07-05 default index  -1 0.5687154 0.9304222 0.3793754 #>   sampleCount noDataCount #> 1        1120         704 #> 2        1120         704 #> 3        1120         704 #> 4        1120         704 #> 5        1120         704"},{"path":"https://zivankaraman.github.io/CDSE/articles/CDSE.html","id":"copernicus-data-space-ecosystem-services-status","dir":"Articles","previous_headings":"","what":"Copernicus Data Space Ecosystem services status","title":"Using 'Copernicus Data Space Ecosystem' API Wrapper","text":"encounter connection issues using package, please check internet connection first. internet connection working fine, can also check status Copernicus Data Space Ecosystem services visiting webpage. provides quasi real-time status various services provided. webpage, scroll Sentinel Hub, pay particular attention Process API (used retrieving images), Catalog API (used catalog searches), Statistical API (used retrieving statistics).","code":""},{"path":"https://zivankaraman.github.io/CDSE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Zivan Karaman. Author, maintainer, copyright holder.","code":""},{"path":"https://zivankaraman.github.io/CDSE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Karaman Z (2025). CDSE: Copernicus Data Space Ecosystem API Wrapper. doi:10.32614/CRAN.package.CDSE, https://zivankaraman.github.io/CDSE/.","code":"@Manual{R-CDSE,   title = {{CDSE}: Copernicus Data Space Ecosystem API Wrapper},   doi = {10.32614/CRAN.package.CDSE},   author = {Zivan Karaman},   year = {2025},   version = {0.3.0},   url = {https://zivankaraman.github.io/CDSE/},   abstract = {Provides interface to the Copernicus Data Space Ecosystem API <https://dataspace.copernicus.eu/analyse/apis>, mainly for searching the catalog of available data from Copernicus Sentinel missions and obtaining the images for just the area of interest based on selected spectral bands. The package uses the Sentinel Hub REST API interface <https://dataspace.copernicus.eu/analyse/apis/sentinel-hub> that provides access to various satellite imagery archives. It allows you to access raw satellite data, rendered images, statistical analysis, and other features. This package is in no way officially related to or endorsed by Copernicus.}, }"},{"path":[]},{"path":"https://zivankaraman.github.io/CDSE/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Copernicus Data Space Ecosystem API Wrapper","text":"package provides interface ‘Copernicus Data Space Ecosystem’ API, mainly searching catalogue available data Copernicus Sentinel missions obtaining images just area interest based selected spectral bands. package uses ‘Sentinel Hub’ RESTful API interface access various satellite imagery archives. allows access raw satellite data, rendered images, statistical analysis, features. package way officially related endorsed Copernicus.  Image generated  Name Landsat","code":""},{"path":[]},{"path":"https://zivankaraman.github.io/CDSE/index.html","id":"stable-version","dir":"","previous_headings":"Installation","what":"Stable version","title":"Copernicus Data Space Ecosystem API Wrapper","text":"can install current stable version CDSE CRAN: Windows macOS binary packages available .","code":"install.packages(\"CDSE\")"},{"path":"https://zivankaraman.github.io/CDSE/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development version","title":"Copernicus Data Space Ecosystem API Wrapper","text":"can install development version CDSE including latest features GitHub:","code":"# install.packages(\"remotes\") remotes::install_github(\"zivankaraman/CDSE\")"},{"path":"https://zivankaraman.github.io/CDSE/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Copernicus Data Space Ecosystem API Wrapper","text":"Access ‘Copernicus Data Space Ecosystem’ free, register get authentication credentials required use API. necessary steps explained detail START article, please read first. set working environment, GET STARTED guide main functions demonstrate use package.","code":""},{"path":"https://zivankaraman.github.io/CDSE/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Copernicus Data Space Ecosystem API Wrapper","text":"package released AGPL-3.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/CDSE-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions in package CDSE. — CDSE-deprecated","title":"Deprecated functions in package CDSE. — CDSE-deprecated","text":"functions listed deprecated defunct   near future. possible, alternative functions similar   functionality also mentioned. Help pages deprecated functions   available help(\"<function>-deprecated\").","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/CDSE-deprecated.html","id":"getarchiveimage","dir":"Reference","previous_headings":"","what":"GetArchiveImage","title":"Deprecated functions in package CDSE. — CDSE-deprecated","text":"GetArchiveImage, use GetImage.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/CDSE.html","id":null,"dir":"Reference","previous_headings":"","what":"Package providing interface to the 'Copernicus Data Space Ecosystem' API — CDSE","title":"Package providing interface to the 'Copernicus Data Space Ecosystem' API — CDSE","text":"CDSE package R developed allow access 'Copernicus Data Space Ecosystem' https://dataspace.copernicus.eu/ data services R. 'Copernicus Data Space Ecosystem', deployed 2023, offers access EO data collection Copernicus missions, discovery download capabilities numerous data processing tools. particular, 'Sentinel Hub' API https://documentation.dataspace.copernicus.eu/APIs/SentinelHub.html provides access multi-spectral multi-temporal big data satellite imagery service, capable fully automated, real-time processing distribution remote sensing data related EO products. Users can use APIs retrieve satellite data AOI specific time range full archives matter seconds. working application EO area interest relatively small compared image tiles distributed Copernicus (100 x 100 km), allows retrieve just portion image interest rather downloading huge tile image file processing locally. goal CDSE package provide easy access functionality R. main functions allow search catalog available imagery Sentinel-1, Sentinel-2, Sentinel-3, Sentinel-5 missions, process download images area interest  time range various formats. functions might added subsequent releases package.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/CDSE.html","id":"api-authentication","dir":"Reference","previous_headings":"","what":"API authentication","title":"Package providing interface to the 'Copernicus Data Space Ecosystem' API — CDSE","text":"API functions require OAuth2 authentication. recommended procedure obtain authentication client object GetOAuthClient function, pass client argument functions requiring authentication. detailed information, invited consult \"start\" document.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/CDSE.html","id":"project-homepage","dir":"Reference","previous_headings":"","what":"Project homepage","title":"Package providing interface to the 'Copernicus Data Space Ecosystem' API — CDSE","text":"https://zivankaraman.github.io/CDSE/, https://github.com/zivankaraman/CDSE","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/CDSE.html","id":"issues","dir":"Reference","previous_headings":"","what":"Issues","title":"Package providing interface to the 'Copernicus Data Space Ecosystem' API — CDSE","text":"bug reports feature requests please use tracker https://github.com/zivankaraman/CDSE/issues","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/CDSE.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Package providing interface to the 'Copernicus Data Space Ecosystem' API — CDSE","text":"Zivan Karaman <zivan.karaman@gmail.com>","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetArchiveImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Get image from the archive (deprecated) — GetArchiveImage","title":"Get image from the archive (deprecated) — GetArchiveImage","text":"Retrieves image area interest using parameters provided.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetArchiveImage.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get image from the archive (deprecated) — GetArchiveImage","text":"https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Process.html","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetArchiveImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get image from the archive (deprecated) — GetArchiveImage","text":"aoi sf sfc object, typically (multi)polygon, describing Area Interest. bbox numeric vector four elements describing bounding box interest.     Specify coordinate pair two (opposite) vertices bounding box rectangle.     Coordinates need longitude, latitude. one either aoi bbox may specified. time_range scalar vector (Date character can converted date) defining time interval. collection character indicating collection search. Must one collections returned GetCollections. script length one character string containing evaluation script name file containing script. mosaicking_order character indicating order tiles overlapped output result mosaicked. Must one \"mostRecent\", \"leastRecent\", \"leastCC\". Default: \"mostRecent\" file name file save image. NULL, SpatRaster object returned. Default: NULL format character indicating output file format. Must one \"image/tiff\", \"image/png\", \"image/jpeg\". Default: \"image/tiff\" pixels integer scalar length-two vector indicating request image width height. Values must integers 1 2500. resolution numeric scalar length-two vector indicating spatial resolution request image     horizontal vertical direction (meters). one arguments \"pixels\" \"resolution\" must set time. argument \"pixels\" \"resolution\" scalar, value used horizontal vertical direction (width height). buffer numeric, width buffer retrieve image enlarged area. Default: 0 mask logical indicating image contain pixels within Area Interest. Default: FALSE client OAuth client object use authentication. token OAuth token character string use authentication. Exactly one either client token must specified. recommended use client. url character indicating process endpoint. Default: Copernicus Data Space Ecosystem process endpoint","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetArchiveImage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get image from the archive (deprecated) — GetArchiveImage","text":"SpatRaster object (package terra) requested image (file NULL),     (invisible) name file created.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetArchiveImage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get image from the archive (deprecated) — GetArchiveImage","text":"aoi argument provided, result returned coordinate reference system.","code":""},{"path":[]},{"path":"https://zivankaraman.github.io/CDSE/reference/GetArchiveImage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get image from the archive (deprecated) — GetArchiveImage","text":"","code":"if (FALSE) { # \\dontrun{ dsn <- system.file(\"extdata\", \"centralpark.geojson\", package = \"CDSE\") aoi <- sf::read_sf(dsn, as_tibble = FALSE) script_file <- system.file(\"scripts\", \"NDVI_uint8.js\", package = \"CDSE\") day <- \"2023-07-11\" ras <- GetArchiveImage(aoi = aoi, time_range = day, script = script_file,        collection = \"sentinel-2-l2a\",format = \"image/tiff\",        mosaicking_order = \"leastCC\", resolution = 10, client = OAuthClient) } # }"},{"path":"https://zivankaraman.github.io/CDSE/reference/GetCollections.html","id":null,"dir":"Reference","previous_headings":"","what":"List available collections — GetCollections","title":"List available collections — GetCollections","text":"Retrieves list available imagery collections.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetCollections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List available collections — GetCollections","text":"","code":"GetCollections(as_data_frame = TRUE, url = getOption(\"CDSE.catalog_url\"))"},{"path":"https://zivankaraman.github.io/CDSE/reference/GetCollections.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"List available collections — GetCollections","text":"https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Catalog.html","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetCollections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List available collections — GetCollections","text":"as_data_frame logical indicating result returned data frame. Default: TRUE url character indicating STAC catalog search endpoint. Default: Copernicus Data Space Ecosystem STAC endpoint","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetCollections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List available collections — GetCollections","text":"list data.frame available imagery collections attributes.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetCollections.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List available collections — GetCollections","text":"function require authentication.","code":""},{"path":[]},{"path":"https://zivankaraman.github.io/CDSE/reference/GetCollections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List available collections — GetCollections","text":"","code":"if (FALSE) { # \\dontrun{ GetCollections(as_data_frame = TRUE) } # }"},{"path":"https://zivankaraman.github.io/CDSE/reference/GetImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Get image from the archive — GetImage","title":"Get image from the archive — GetImage","text":"Retrieves image area interest using parameters provided.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetImage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get image from the archive — GetImage","text":"","code":"GetImage(   aoi,   bbox,   time_range,   collection,   script,   file = NULL,   format = c(\"image/tiff\", \"image/png\", \"image/jpeg\"),   mosaicking_order = c(\"mostRecent\", \"leastRecent\", \"leastCC\"),   pixels,   resolution,   buffer = 0,   mask = FALSE,   client,   token,   url = getOption(\"CDSE.process_url\") )"},{"path":"https://zivankaraman.github.io/CDSE/reference/GetImage.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get image from the archive — GetImage","text":"https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Process.html","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get image from the archive — GetImage","text":"aoi sf sfc object, typically (multi)polygon, describing Area Interest. bbox numeric vector four elements describing bounding box interest.     Specify coordinate pair two (opposite) vertices bounding box rectangle.     Coordinates need longitude, latitude. one either aoi bbox may specified. time_range scalar vector (Date character can converted date) defining time interval. collection character indicating collection search. Must one collections returned GetCollections. script length one character string containing evaluation script name file containing script. file name file save image. NULL, SpatRaster object returned. Default: NULL format character indicating output file format. Must one \"image/tiff\", \"image/png\", \"image/jpeg\". Default: \"image/tiff\" mosaicking_order character indicating order tiles overlapped output result mosaicked. Must one \"mostRecent\", \"leastRecent\", \"leastCC\". Default: \"mostRecent\" pixels integer scalar length-two vector indicating request image width height. Values must integers 1 2500. resolution numeric scalar length-two vector indicating spatial resolution request image     horizontal vertical direction (meters). one arguments \"pixels\" \"resolution\" must set time. argument \"pixels\" \"resolution\" scalar, value used horizontal vertical direction (width height). buffer numeric, width buffer retrieve image enlarged area. Default: 0 mask logical indicating image contain pixels within Area Interest. Default: FALSE client OAuth client object use authentication. token OAuth token character string use authentication. Exactly one either client token must specified. recommended use client. url character indicating process endpoint. Default: Copernicus Data Space Ecosystem process endpoint","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetImage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get image from the archive — GetImage","text":"SpatRaster object (package terra) requested image (file NULL),     (invisible) name file created.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetImage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get image from the archive — GetImage","text":"aoi argument provided, result returned coordinate reference system.","code":""},{"path":[]},{"path":"https://zivankaraman.github.io/CDSE/reference/GetImage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get image from the archive — GetImage","text":"","code":"if (FALSE) { # \\dontrun{ dsn <- system.file(\"extdata\", \"centralpark.geojson\", package = \"CDSE\") aoi <- sf::read_sf(dsn, as_tibble = FALSE) script_file <- system.file(\"scripts\", \"NDVI_uint8.js\", package = \"CDSE\") day <- \"2023-07-11\" ras <- GetImage(aoi = aoi, time_range = day, script = script_file,        collection = \"sentinel-2-l2a\",format = \"image/tiff\",        mosaicking_order = \"leastCC\", resolution = 10, client = OAuthClient) } # }"},{"path":"https://zivankaraman.github.io/CDSE/reference/GetImageBy....html","id":null,"dir":"Reference","previous_headings":"","what":"Get image from the archive (vectorization ready) — GetImageBy...","title":"Get image from the archive (vectorization ready) — GetImageBy...","text":"functions retrieve image area interest using parameters provided.     simple wrappers around 'GetImage' function arguments organized way     facilitates calling function vectorized manner (using 'lapply' similar function)     thus potentially also parallelization.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetImageBy....html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get image from the archive (vectorization ready) — GetImageBy...","text":"","code":"GetImageByTimerange(   time_range,   aoi,   bbox,   collection,   script,   file = NULL,   format = c(\"image/tiff\", \"image/png\", \"image/jpeg\"),   mosaicking_order = c(\"mostRecent\", \"leastRecent\", \"leastCC\"),   pixels,   resolution,   buffer = 0,   mask = FALSE,   client,   token,   url = getOption(\"CDSE.process_url\") )  GetImageByAOI(   aoi,   time_range,   collection,   script,   file = NULL,   format = c(\"image/tiff\", \"image/png\", \"image/jpeg\"),   mosaicking_order = c(\"mostRecent\", \"leastRecent\", \"leastCC\"),   pixels,   resolution,   buffer = 0,   mask = FALSE,   client,   token,   url = getOption(\"CDSE.process_url\") )  GetImageByBbox(   bbox,   time_range,   collection,   script,   file = NULL,   format = c(\"image/tiff\", \"image/png\", \"image/jpeg\"),   mosaicking_order = c(\"mostRecent\", \"leastRecent\", \"leastCC\"),   pixels,   resolution,   buffer = 0,   mask = FALSE,   client,   token,   url = getOption(\"CDSE.process_url\") )"},{"path":"https://zivankaraman.github.io/CDSE/reference/GetImageBy....html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get image from the archive (vectorization ready) — GetImageBy...","text":"https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Process.html","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetImageBy....html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get image from the archive (vectorization ready) — GetImageBy...","text":"time_range scalar vector (Date character can converted date) defining time interval. aoi sf sfc object, typically (multi)polygon, describing Area Interest. bbox numeric vector four elements describing bounding box interest.     Specify coordinate pair two (opposite) vertices bounding box rectangle.     Coordinates need longitude, latitude. one either aoi bbox may specified. collection character indicating collection search. Must one collections returned GetCollections. script length one character string containing evaluation script name file containing script. file name file save image. NULL, SpatRaster object returned. Default: NULL format character indicating output file format. Must one \"image/tiff\", \"image/png\", \"image/jpeg\". Default: \"image/tiff\" mosaicking_order character indicating order tiles overlapped output result mosaicked. Must one \"mostRecent\", \"leastRecent\", \"leastCC\". Default: \"mostRecent\" pixels integer scalar length-two vector indicating request image width height. Values must integers 1 2500. resolution numeric scalar length-two vector indicating spatial resolution request image     horizontal vertical direction (meters). one arguments \"pixels\" \"resolution\" must set time. argument \"pixels\" \"resolution\" scalar, value used horizontal vertical direction (width height). buffer numeric, width buffer retrieve image enlarged area. Default: 0 mask logical indicating image contain pixels within Area Interest. Default: FALSE client OAuth client object use authentication. token OAuth token character string use authentication. Exactly one either client token must specified. recommended use client. url character indicating process endpoint. Default: Copernicus Data Space Ecosystem process endpoint","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetImageBy....html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get image from the archive (vectorization ready) — GetImageBy...","text":"SpatRaster object (package terra) requested image (file NULL),     (invisible) name file created.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetImageBy....html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get image from the archive (vectorization ready) — GetImageBy...","text":"aoi argument provided, result returned coordinate reference system. GetImageByTimerange arranged vectorization time_range (time_range first argument). GetImageByAOI arranged vectorization aoi (aoi first argument). GetImageByBbox arranged vectorization bbox (bbox first argument).","code":""},{"path":[]},{"path":"https://zivankaraman.github.io/CDSE/reference/GetImageBy....html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get image from the archive (vectorization ready) — GetImageBy...","text":"","code":"if (FALSE) { # \\dontrun{ dsn <- system.file(\"extdata\", \"centralpark.geojson\", package = \"CDSE\") aoi <- sf::read_sf(dsn, as_tibble = FALSE) cloudless_images <- SearchCatalog(aoi = aoi, from = \"2023-01-01\", to = \"2023-12-31\",                     collection = \"sentinel-2-l2a\", with_geometry = TRUE,                     filter = \"eo:cloud_cover < 0.8\", client = OAuthClient) script_file <- system.file(\"scripts\", \"NDVI_float32.js\", package = \"CDSE\") days <- rev(cloudless_images$acquisitionDate) lstRast <- lapply(days, GetImageByTimerange, aoi = aoi, collection = \"sentinel-2-l2a\",     script = script_file, file = NULL, format = \"image/tiff\", mosaicking_order = \"mostRecent\",     resolution = 10, buffer = 0, mask = TRUE, client = OAuthClient,     url = getOption(\"CDSE.process_url\")) par(mfrow = c(3, 4)) sapply(seq_along(days), FUN = function(i) {      ras <- lstRast[[i]]      day <- days[i]      ras[ras < 0] <- 0      terra::plot(ras, main = paste(\"Central Park NDVI on\", day), range = c(0, 1),             cex.main = 0.7, pax = list(cex.axis = 0.5), plg = list(cex = 0.5),             col = colorRampPalette(c(\"darkred\", \"yellow\", \"darkgreen\"))(99))      }) } # }"},{"path":"https://zivankaraman.github.io/CDSE/reference/GetOAuthClient.html","id":null,"dir":"Reference","previous_headings":"","what":"Get OAuth client — GetOAuthClient","title":"Get OAuth client — GetOAuthClient","text":"Gets OAuth authentication client (httr2 OAuth client object)","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetOAuthClient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get OAuth client — GetOAuthClient","text":"","code":"GetOAuthClient(id, secret, url = getOption(\"CDSE.auth_url\"))"},{"path":"https://zivankaraman.github.io/CDSE/reference/GetOAuthClient.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get OAuth client — GetOAuthClient","text":"https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Overview/Authentication.html","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetOAuthClient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get OAuth client — GetOAuthClient","text":"id character, user OAuth client id secret character, user OAuth client secret url character, endpoint requesting tokens. Default: Copernicus Data Space Ecosystem OAuth endpoint","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetOAuthClient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get OAuth client — GetOAuthClient","text":"httr2 OAuth client object","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetOAuthClient.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get OAuth client — GetOAuthClient","text":"client can used queries requiring authentication.","code":""},{"path":[]},{"path":"https://zivankaraman.github.io/CDSE/reference/GetOAuthClient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get OAuth client — GetOAuthClient","text":"","code":"if (FALSE) { # \\dontrun{ id <- \"...\" secret <- \"...\" OAuthClient <- GetOAuthClient(id = id, secret = secret) } # }"},{"path":"https://zivankaraman.github.io/CDSE/reference/GetOAuthToken.html","id":null,"dir":"Reference","previous_headings":"","what":"Get OAuth token — GetOAuthToken","title":"Get OAuth token — GetOAuthToken","text":"Gets OAuth authentication token (long character string)","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetOAuthToken.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get OAuth token — GetOAuthToken","text":"","code":"GetOAuthToken(id, secret, url = getOption(\"CDSE.auth_url\"))"},{"path":"https://zivankaraman.github.io/CDSE/reference/GetOAuthToken.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get OAuth token — GetOAuthToken","text":"https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Overview/Authentication.html","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetOAuthToken.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get OAuth token — GetOAuthToken","text":"id character, user OAuth client id secret character, user OAuth client secret url character, endpoint requesting tokens. Default: Copernicus Data Space Ecosystem OAuth endpoint","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetOAuthToken.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get OAuth token — GetOAuthToken","text":"Long character string containing authentication token.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetOAuthToken.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get OAuth token — GetOAuthToken","text":"token can used queries requiring authentication.","code":""},{"path":[]},{"path":"https://zivankaraman.github.io/CDSE/reference/GetOAuthToken.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get OAuth token — GetOAuthToken","text":"","code":"if (FALSE) { # \\dontrun{ id <- \"...\" secret <- \"...\" token <- GetOAuthToken(id = id, secret = secret) } # }"},{"path":"https://zivankaraman.github.io/CDSE/reference/GetQueryables.html","id":null,"dir":"Reference","previous_headings":"","what":"Get CQL2 parameters for a collection — GetQueryables","title":"Get CQL2 parameters for a collection — GetQueryables","text":"Returns list variable terms can used CQL2 expressions filter collection catalog search.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetQueryables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get CQL2 parameters for a collection — GetQueryables","text":"","code":"GetQueryables(   collection,   as_data_frame = TRUE,   client,   token,   url = getOption(\"CDSE.catalog_url\") )"},{"path":"https://zivankaraman.github.io/CDSE/reference/GetQueryables.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get CQL2 parameters for a collection — GetQueryables","text":"https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/ApiReference.html#tag/catalog_collections/operation/getCatalogCollectionQueryables","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetQueryables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get CQL2 parameters for a collection — GetQueryables","text":"collection character indicating collection parameters queried. Must one collections returned GetCollections. as_data_frame logical indicating result returned data frame. Default: TRUE client OAuth client object use authentication. token OAuth token character string use authentication. Exactly one either client token must specified. recommended use client. url character indicating STAC catalog search endpoint. Default: Copernicus Data Space Ecosystem STAC endpoint","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetQueryables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get CQL2 parameters for a collection — GetQueryables","text":"list data.frame.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetQueryables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get CQL2 parameters for a collection — GetQueryables","text":"parameters found, NULL value 0-row data.frame returned.","code":""},{"path":[]},{"path":"https://zivankaraman.github.io/CDSE/reference/GetQueryables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get CQL2 parameters for a collection — GetQueryables","text":"","code":"if (FALSE) { # \\dontrun{ GetQueryables(\"sentinel-2-l2a\", client = OAuthClient) } # }"},{"path":"https://zivankaraman.github.io/CDSE/reference/GetStatistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Get statistical values — GetStatistics","title":"Get statistical values — GetStatistics","text":"Retrieves simple statistics area interest calculated based satellite imagery     without download images.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetStatistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get statistical values — GetStatistics","text":"","code":"GetStatistics(   aoi,   bbox,   time_range,   collection,   script,   mosaicking_order = c(\"mostRecent\", \"leastRecent\", \"leastCC\")[1],   pixels,   resolution,   buffer = 0,   percentiles = NULL,   aggregation_period = 1L,   aggregation_unit = c(\"day\", \"week\", \"month\", \"year\")[1],   lastIntervalBehavior = c(\"SKIP\", \"SHORTEN\", \"EXTEND\")[1],   as_data_frame = TRUE,   client,   token,   url = getOption(\"CDSE.statistical_url\") )"},{"path":"https://zivankaraman.github.io/CDSE/reference/GetStatistics.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get statistical values — GetStatistics","text":"https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Statistical.html","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetStatistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get statistical values — GetStatistics","text":"aoi sf sfc object, typically (multi)polygon, describing Area Interest. bbox numeric vector four elements describing bounding box interest.     Specify coordinate pair two (opposite) vertices bounding box rectangle.     Coordinates need longitude, latitude. one either aoi bbox may specified. time_range scalar vector (Date character can converted date) defining time interval. collection character indicating collection search. Must one collections returned GetCollections. script length one character string containing evaluation script name file containing script. mosaicking_order character indicating order tiles overlapped output result mosaicked. Must one \"mostRecent\", \"leastRecent\", \"leastCC\". Partial matching used, , enough initial letters string element needed guarantee unique recognition. Default: \"mostRecent\" pixels integer scalar length-two vector indicating request image width height. Values must integers 1 2500. resolution numeric scalar length-two vector indicating spatial resolution request image     horizontal vertical direction (meters). one arguments pixels resolution must set time.     argument pixels resolution scalar, value used horizontal vertical direction (width height). buffer numeric, width buffer retrieve image enlarged area. Default: 0 percentiles numeric vector indicating percentile values computed. Default: NULL, compute percentiles. aggregation_period length aggregation period aggregation_unit (days default). Default: 1 aggregation_unit character indicating unit aggregation period, must one \"day\", \"week\", \"month\", \"year\". Partial matching used, , enough initial letters string element needed guarantee unique recognition (just first letter enough). Default: \"day\" lastIntervalBehavior character indicating behavior last interval     given time_range divisible provided aggregation_period.     Must one : SKIP - skip last interval (default behavior) SHORTEN - shortens last interval ends end provided time_range EXTEND - extends last interval end provided time range intervals equal duration Partial matching used, ,     enough initial letters string element needed guarantee unique     recognition. Default: \"SKIP\" as_data_frame logical indicating result returned data frame. Default: TRUE client OAuth client object use authentication. token OAuth token character string use authentication. Exactly one either client token must specified. recommended use client. url character indicating process endpoint. Default: Copernicus Data Space Ecosystem process endpoint","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetStatistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get statistical values — GetStatistics","text":"data.frame list statistical values.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetStatistics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get statistical values — GetStatistics","text":"values aggregated period (number aggregation_units)    given aggregation_period argument.    default values provide daily statistics. statistics returned    aggregation_units (days, weeks, months, years) data    available. can determined days satellite overpasses, also    calculations done evaluation script. scripts used Statistical API additional requirements: evaluatePixel()        function must, addition output, always also return dataMask output.        output defines pixels excluded calculations.    information please visit online documentation    https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Statistical.html. time_range divisible aggregation_period, last (\"full\") time    interval dismissed default (SKIP option). user can instead set    lastIntervalBehavior SHORTEN (shortens last interval ends end    provided time range) EXTEND (extends last interval end    provided time range intervals equal duration). percentiles requested 25, 50, 75, columns renamed 'q1', 'median', 'q3'.","code":""},{"path":[]},{"path":"https://zivankaraman.github.io/CDSE/reference/GetStatistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get statistical values — GetStatistics","text":"","code":"if (FALSE) { # \\dontrun{ dsn <- system.file(\"extdata\", \"centralpark.geojson\", package = \"CDSE\") aoi <- sf::read_sf(dsn, as_tibble = FALSE) script_file <- system.file(\"scripts\", \"NDVI_CLOUDS_STAT.js\", package = \"CDSE\") daily_stats <- GetStatistics(aoi = aoi, time_range = c(\"2023-07-01\", \"2023-07-31\"),   collection = \"sentinel-2-l2a\", script = script_file, mosaicking_order = \"leastCC\",   resolution = 100, aggregation_period = 1, client = OAuthClient) # specify week as 7 days weekly_stats <- GetStatistics(aoi = aoi, time_range = c(\"2023-07-01\", \"2023-07-31\"),   collection = \"sentinel-2-l2a\", script = script_file,mosaicking_order = \"leastCC\",   resolution = 100, aggregation_period = 7, client = OAuthClient) # specify week as 1 week weekly_stats_extended <- GetStatistics(aoi = aoi, time_range = c(\"2023-07-01\", \"2023-07-31\"),   collection = \"sentinel-2-l2a\", script = script_file, mosaicking_order = \"leastCC\",   resolution = 100, aggregation_period = 1, aggregation_unit = \"w\",   lastIntervalBehavior = \"EXTEND\", client = OAuthClient) } # }"},{"path":"https://zivankaraman.github.io/CDSE/reference/GetStatisticsBy....html","id":null,"dir":"Reference","previous_headings":"","what":"Get statistical values (vectorization ready) — GetStatisticsBy...","title":"Get statistical values (vectorization ready) — GetStatisticsBy...","text":"functions retrieve simple statistics area interest calculated     based satellite imagery without download images.     simple wrappers around GetStatistics function arguments organized way     facilitates calling function vectorized manner (using lapply similar function)     thus potentially also parallelization.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetStatisticsBy....html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get statistical values (vectorization ready) — GetStatisticsBy...","text":"","code":"GetStatisticsByTimerange(   time_range,   aoi,   bbox,   collection,   script,   mosaicking_order = c(\"mostRecent\", \"leastRecent\", \"leastCC\")[1],   pixels,   resolution,   buffer = 0,   percentiles = NULL,   aggregation_period = 1L,   aggregation_unit = c(\"day\", \"week\", \"month\", \"year\")[1],   lastIntervalBehavior = c(\"SKIP\", \"SHORTEN\", \"EXTEND\")[1],   as_data_frame = TRUE,   client,   token,   url = getOption(\"CDSE.statistical_url\") )  GetStatisticsByAOI(   aoi,   time_range,   collection,   script,   mosaicking_order = c(\"mostRecent\", \"leastRecent\", \"leastCC\")[1],   pixels,   resolution,   buffer = 0,   percentiles = NULL,   aggregation_period = 1L,   aggregation_unit = c(\"day\", \"week\", \"month\", \"year\")[1],   lastIntervalBehavior = c(\"SKIP\", \"SHORTEN\", \"EXTEND\")[1],   as_data_frame = TRUE,   client,   token,   url = getOption(\"CDSE.statistical_url\") )  GetStatisticsByBbox(   bbox,   time_range,   collection,   script,   mosaicking_order = c(\"mostRecent\", \"leastRecent\", \"leastCC\")[1],   pixels,   resolution,   buffer = 0,   percentiles = NULL,   aggregation_period = 1L,   aggregation_unit = c(\"day\", \"week\", \"month\", \"year\")[1],   lastIntervalBehavior = c(\"SKIP\", \"SHORTEN\", \"EXTEND\")[1],   as_data_frame = TRUE,   client,   token,   url = getOption(\"CDSE.statistical_url\") )"},{"path":"https://zivankaraman.github.io/CDSE/reference/GetStatisticsBy....html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get statistical values (vectorization ready) — GetStatisticsBy...","text":"https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Statistical.html","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetStatisticsBy....html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get statistical values (vectorization ready) — GetStatisticsBy...","text":"time_range scalar vector (Date character can converted date) defining time interval. aoi sf sfc object, typically (multi)polygon, describing Area Interest. bbox numeric vector four elements describing bounding box interest.     Specify coordinate pair two (opposite) vertices bounding box rectangle.     Coordinates need longitude, latitude. one either aoi bbox may specified. collection character indicating collection search. Must one collections returned GetCollections. script length one character string containing evaluation script name file containing script. mosaicking_order character indicating order tiles overlapped output result mosaicked. Must one \"mostRecent\", \"leastRecent\", \"leastCC\". Partial matching used, , enough initial letters string element needed guarantee unique recognition. Default: \"mostRecent\" pixels integer scalar length-two vector indicating request image width height. Values must integers 1 2500. resolution numeric scalar length-two vector indicating spatial resolution request image     horizontal vertical direction (meters). one arguments \"pixels\" \"resolution\" must set time.     argument \"pixels\" \"resolution\" scalar, value used horizontal vertical direction (width height). buffer numeric, width buffer retrieve image enlarged area. Default: 0 percentiles numeric vector indicating percentile values computed. Default: NULL, compute percentiles. aggregation_period length aggregation period aggregation_unit (days default). Default: 1 aggregation_unit character indicating unit aggregation period, must one \"day\", \"week\", \"month\", \"year\". Partial matching used, , enough initial letters string element needed guarantee unique recognition (just first letter enough). Default: \"day\" lastIntervalBehavior character indicating behavior last interval     given time_range divisible provided aggregation_period.     Must one : SKIP - skip last interval (default behavior) SHORTEN - shortens last interval ends end provided time_range EXTEND - extends last interval end provided time range intervals equal duration Partial matching used, ,     enough initial letters string element needed guarantee unique     recognition. Default: \"SKIP\" as_data_frame logical indicating result returned data frame. Default: TRUE client OAuth client object use authentication. token OAuth token character string use authentication. Exactly one either client token must specified. recommended use client. url character indicating process endpoint. Default: Copernicus Data Space Ecosystem process endpoint","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetStatisticsBy....html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get statistical values (vectorization ready) — GetStatisticsBy...","text":"data.frame list statistical values.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/GetStatisticsBy....html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get statistical values (vectorization ready) — GetStatisticsBy...","text":"values aggregated period (number aggregation_units)    given aggregation_period argument.    default values provide daily statistics. statistics returned    aggregation_units (days, weeks, months, years) data    available. can determined days satellite overpasses, also    calculations done evaluation script. scripts used Statistical API additional requirements: evaluatePixel()        function must, addition output, always also return dataMask output.        output defines pixels excluded calculations.    information please visit online documentation    https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Statistical.html. time_range divisible aggregation_period, last (\"full\") time    interval dismissed default (SKIP option). user can instead set    lastIntervalBehavior SHORTEN (shortens last interval ends end    provided time range) EXTEND (extends last interval end    provided time range intervals equal duration). percentiles requested 25, 50, 75, columns renamed 'q1', 'median', 'q3'. GetStatisticsByTimerange arranged vectorization time_range (time_range first argument). GetStatisticsByAOI arranged vectorization aoi (aoi first argument). GetStatisticsByBbox arranged vectorization bbox (bbox first argument).","code":""},{"path":[]},{"path":"https://zivankaraman.github.io/CDSE/reference/GetStatisticsBy....html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get statistical values (vectorization ready) — GetStatisticsBy...","text":"","code":"if (FALSE) { # \\dontrun{ dsn <- system.file(\"extdata\", \"centralpark.geojson\", package = \"CDSE\") aoi <- sf::read_sf(dsn, as_tibble = FALSE) script_file <- \"inst/scripts/NDVI_dataMask_float32.js\" seasons <- SeasonalTimerange(from = \"2020-06-01\", to = \"2023-08-31\") lst_stats <- lapply(seasons, GetStatisticsByTimerange, aoi = aoi, collection = \"sentinel-2-l2a\",    script = script_file, mosaicking_order = \"leastCC\", resolution = 100,    aggregation_period = 7L, client = OAuthClient) weekly_stats <- do.call(rbind, lst_stats) weekly_stats <- weekly_stats[rev(order(weekly_stats$from)), ] row.names(weekly_stats) <- NULL head(weekly_stats) } # }"},{"path":"https://zivankaraman.github.io/CDSE/reference/MakeEvalScript.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Sentinel Hub API Evalscript — MakeEvalScript","title":"Create a Sentinel Hub API Evalscript — MakeEvalScript","text":"Generates JavaScript evalscript calculating spectral index Sentinel-1 Sentinel-2 imagery.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/MakeEvalScript.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Sentinel Hub API Evalscript — MakeEvalScript","text":"","code":"MakeEvalScript(x, ...)"},{"path":"https://zivankaraman.github.io/CDSE/reference/MakeEvalScript.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Sentinel Hub API Evalscript — MakeEvalScript","text":"x character string short_name spectral index rsi::spectral_indices() single-row data.frame (list) elements bands, formula, platforms, optionally long_name. ... Named arguments providing values constants required index's formula. function stop required constant missing warn unused arguments provided.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/MakeEvalScript.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Sentinel Hub API Evalscript — MakeEvalScript","text":"`character` vector containing JavaScript evalscript. can used `script` argument functions require one shown : ..., script = paste(MakeEvalScript(\"NDVI\"), collapse = \"\\n\"), .... can also saved file later use modifications.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/MakeEvalScript.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Sentinel Hub API Evalscript — MakeEvalScript","text":"function takes spectral index definition creates JavaScript evalscript compatible Sentinel Hub API. index can specified short name rsi package's spectral index database (see rsi::spectral_indices()) custom list data.frame. function automatically maps common band names (e.g., `N`, `R`, `G`, `B`) corresponding Sentinel-1 Sentinel-2 band names required API. constants index formula (e.g., soil adjustment factor `L` SAVI) must provided named arguments.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/MakeEvalScript.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Sentinel Hub API Evalscript — MakeEvalScript","text":"","code":"if (FALSE) { # \\dontrun{  # NDVI si <- rsi::spectral_indices() # retrieves spectral indices ndvi <- subset(si, short_name == \"NDVI\") # creates one-row data.frame ndvi_script <- MakeEvalScript(ndvi) # generates the script cat(ndvi_script, sep = \"\\n\")  # SAVI, which requires the constant L cat(MakeEvalScript(\"SAVI\", L = 0.5), sep = \"\\n\", file = \"SAVI.js\")  # Using a custom index definition as a data.frame custom_index <- data.frame(   short_name = \"GNDVI\",   long_name = \"Green Normalized Difference Vegetation Index\",   platforms = I(list(\"Sentinel-2\")),   bands = I(list(c(\"N\", \"G\"))),   formula = \"(N - G) / (N + G)\" ) cat(MakeEvalScript(custom_index)) } # }"},{"path":"https://zivankaraman.github.io/CDSE/reference/Point2Bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Create bounding box around a point — Point2Bbox","title":"Create bounding box around a point — Point2Bbox","text":"Creates bounding box (numeric vector length four) around input point(s).","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/Point2Bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create bounding box around a point — Point2Bbox","text":"","code":"Point2Bbox(x, y = NULL, size, crs = 4326)"},{"path":"https://zivankaraman.github.io/CDSE/reference/Point2Bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create bounding box around a point — Point2Bbox","text":"x sf, sfc, SpatialPoints* object, numeric indicating longitude/easting point(s), input accepted xy.coords y numeric, latitude/northing point(s). Default: NULL size numeric indicating size (meters) bounding box create crs coordinate reference system input (output): object class crs, input string st_crs. Default: 4326 (WGS 84)","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/Point2Bbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create bounding box around a point — Point2Bbox","text":"bounding box (numeric vector length four), list bounding boxes input scalar.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/Point2Bbox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create bounding box around a point — Point2Bbox","text":"function assumes crs units either degrees meters, warning issued ,     result probably incorrect.","code":""},{"path":[]},{"path":"https://zivankaraman.github.io/CDSE/reference/Point2Bbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create bounding box around a point — Point2Bbox","text":"","code":"if (FALSE) { # \\dontrun{ Point2Bbox(x = -73.96557, y = 40.78246, size = 1000, crs = 4326) } # }"},{"path":"https://zivankaraman.github.io/CDSE/reference/SearchCatalog.html","id":null,"dir":"Reference","previous_headings":"","what":"Search collection for available images — SearchCatalog","title":"Search collection for available images — SearchCatalog","text":"Searches specified collection available images given time interval intersecting     bounding box area interest.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/SearchCatalog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search collection for available images — SearchCatalog","text":"","code":"SearchCatalog(   aoi,   bbox,   from,   to,   collection,   as_data_frame = TRUE,   with_geometry = TRUE,   filter = NULL,   client,   token,   url = getOption(\"CDSE.catalog_url\") )"},{"path":"https://zivankaraman.github.io/CDSE/reference/SearchCatalog.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search collection for available images — SearchCatalog","text":"https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Catalog.html","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/SearchCatalog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search collection for available images — SearchCatalog","text":"aoi sf sfc object, typically (multi)polygon, describing Area Interest. bbox numeric vector four elements describing bounding box interest.     Specify coordinate pair two (opposite) vertices bounding box rectangle.     Coordinates need longitude, latitude. one either aoi bbox may specified. start time interval search. end time interval search. can either Date character can converted date .Date. Open interval (one side ) can obtained providing NA NULL value corresponding argument. collection character indicating collection search. Must one collections returned GetCollections. as_data_frame logical indicating result returned data frame. Default: TRUE with_geometry logical indicating granule geometries included data.frame. Default: TRUE filter character, CQL2 text filter. Use function GetQueryables find filters can bu used collection. Default: NULL (filtering) client OAuth client object use authentication. token OAuth token character string use authentication. Exactly one either client token must specified. recommended use client. url character indicating STAC catalog search endpoint. Default: Copernicus Data Space Ecosystem STAC endpoint","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/SearchCatalog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search collection for available images — SearchCatalog","text":"list, data.frame sf object.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/SearchCatalog.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search collection for available images — SearchCatalog","text":"images found, NULL value returned.","code":""},{"path":[]},{"path":"https://zivankaraman.github.io/CDSE/reference/SearchCatalog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search collection for available images — SearchCatalog","text":"","code":"if (FALSE) { # \\dontrun{ dsn <- system.file(\"extdata\", \"luxembourg.geojson\", package = \"CDSE\") aoi <- sf::read_sf(dsn, as_tibble = FALSE) images <- SearchCatalog(aoi = aoi, from = \"2023-07-01\", to = \"2023-07-31\",           collection = \"sentinel-2-l2a\", with_geometry = TRUE, client = OAuthClient) images_cloudless <- SearchCatalog(aoi = aoi, from = \"2023-07-01\", to = \"2023-07-31\",           filter = \"eo:cloud_cover < 5\",           collection = \"sentinel-2-l2a\", with_geometry = TRUE, client = OAuthClient) } # }"},{"path":"https://zivankaraman.github.io/CDSE/reference/SearchCatalogBy....html","id":null,"dir":"Reference","previous_headings":"","what":"Search collection for available images (vectorization ready) — SearchCatalogBy...","title":"Search collection for available images (vectorization ready) — SearchCatalogBy...","text":"functions search specified collection available images using parameters provided.     simple wrappers around 'SearchCatalog' function arguments organized way     facilitates calling function vectorized manner (using 'lapply' similar function)     thus potentially also parallelization. '' '' arguments combined single argument 'time_range'.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/SearchCatalogBy....html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search collection for available images (vectorization ready) — SearchCatalogBy...","text":"","code":"SearchCatalogByTimerange(   time_range,   aoi,   bbox,   collection,   as_data_frame = TRUE,   with_geometry = TRUE,   filter = NULL,   client,   token,   url = getOption(\"CDSE.catalog_url\") )  SearchCatalogByAOI(   aoi,   time_range,   collection,   as_data_frame = TRUE,   with_geometry = TRUE,   filter = NULL,   client,   token,   url = getOption(\"CDSE.catalog_url\") )  SearchCatalogByBbox(   bbox,   time_range,   collection,   as_data_frame = TRUE,   with_geometry = TRUE,   filter = NULL,   client,   token,   url = getOption(\"CDSE.catalog_url\") )"},{"path":"https://zivankaraman.github.io/CDSE/reference/SearchCatalogBy....html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Search collection for available images (vectorization ready) — SearchCatalogBy...","text":"https://documentation.dataspace.copernicus.eu/APIs/SentinelHub/Catalog.html","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/SearchCatalogBy....html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search collection for available images (vectorization ready) — SearchCatalogBy...","text":"time_range scalar vector (Date character can converted date) defining time interval. Open interval (one side ) can obtained providing NA NULL value corresponding argument. aoi sf sfc object, typically (multi)polygon, describing Area Interest. bbox numeric vector four elements describing bounding box interest.     Specify coordinate pair two (opposite) vertices bounding box rectangle.     Coordinates need longitude, latitude. one either aoi bbox may specified. collection character indicating collection search. Must one collections returned GetCollections. as_data_frame logical indicating result returned data frame. Default: TRUE with_geometry logical indicating granule geometries included data.frame. Default: TRUE filter character, CQL2 text filter. Use function GetQueryables find filters can bu used collection. Default: NULL (filtering) client OAuth client object use authentication. token OAuth token character string use authentication. Exactly one either client token must specified. recommended use client. url character indicating STAC catalog search endpoint. Default: Copernicus Data Space Ecosystem STAC endpoint","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/SearchCatalogBy....html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search collection for available images (vectorization ready) — SearchCatalogBy...","text":"list, data.frame sf object.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/SearchCatalogBy....html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search collection for available images (vectorization ready) — SearchCatalogBy...","text":"images found, NULL value returned. SearchCatalogByTimerange arranged vectorization time_range (time_range first argument). SearchCatalogByAOI arranged vectorization aoi (aoi first argument). SearchCatalogByBbox arranged vectorization bbox (bbox first argument).","code":""},{"path":[]},{"path":"https://zivankaraman.github.io/CDSE/reference/SearchCatalogBy....html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search collection for available images (vectorization ready) — SearchCatalogBy...","text":"","code":"if (FALSE) { # \\dontrun{ dsn <- system.file(\"extdata\", \"centralpark.geojson\", package = \"CDSE\") aoi <- sf::read_sf(dsn, as_tibble = FALSE) seasons <- SeasonalTimerange(from = \"2020-06-01\", to = \"2023-08-31\") lst_images_cloudless <- lapply(seasons, SearchCatalogByTimerange, aoi = aoi,     collection = \"sentinel-2-l2a\", with_geometry = FALSE,     filter = \"eo:cloud_cover < 5\", client = OAuthClient) images_cloudless <- do.call(rbind, lst_images_cloudless) images_cloudless <- images_cloudless[rev(order(images_cloudless$acquisitionDate)), ] row.names(images_cloudless) <- NULL head(images_cloudless[, 1:5]) } # }"},{"path":"https://zivankaraman.github.io/CDSE/reference/SeasonalFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter image catalog for seasonal images — SeasonalFilter","title":"Filter image catalog for seasonal images — SeasonalFilter","text":"Filters image catalog entries fall season interest -    dates day/month day/month years    - time range.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/SeasonalFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter image catalog for seasonal images — SeasonalFilter","text":"","code":"SeasonalFilter(catalog, from, to)"},{"path":"https://zivankaraman.github.io/CDSE/reference/SeasonalFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter image catalog for seasonal images — SeasonalFilter","text":"catalog data.frame sf object one produced call SearchCatalog start season interest. end season interest. arguments can either Date character can converted date .Date.     Open intervals allowed (must valid dates).","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/SeasonalFilter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter image catalog for seasonal images — SeasonalFilter","text":"data.frame sf object, depending type input.","code":""},{"path":[]},{"path":"https://zivankaraman.github.io/CDSE/reference/SeasonalFilter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter image catalog for seasonal images — SeasonalFilter","text":"","code":"if (FALSE) { # \\dontrun{ dsn <- system.file(\"extdata\", \"centralpark.geojson\", package = \"CDSE\") aoi <- sf::read_sf(dsn, as_tibble = FALSE) all_images <- SearchCatalog(aoi = aoi, from = \"2021-06-01\", to = \"2023-08-31\",     collection = \"sentinel-2-l2a\", with_geometry = TRUE, client = OAuthClient) sesonal_images <- SeasonalFilter(all_images, from = \"2021-06-01\", to = \"2023-08-31\") } # }"},{"path":"https://zivankaraman.github.io/CDSE/reference/SeasonalTimerange.html","id":null,"dir":"Reference","previous_headings":"","what":"Create seasonal time range — SeasonalTimerange","title":"Create seasonal time range — SeasonalTimerange","text":"Creates list seasonal filters (one per year) season interest -    dates day/month day/month years    - time range.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/SeasonalTimerange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create seasonal time range — SeasonalTimerange","text":"","code":"SeasonalTimerange(from, to)"},{"path":"https://zivankaraman.github.io/CDSE/reference/SeasonalTimerange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create seasonal time range — SeasonalTimerange","text":"start season interest. end season interest. arguments can either Date character can converted date .Date.     Open intervals allowed (must valid dates).","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/SeasonalTimerange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create seasonal time range — SeasonalTimerange","text":"list time ranges defining season interest year.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/SeasonalTimerange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create seasonal time range — SeasonalTimerange","text":"","code":"if (FALSE) { # \\dontrun{ seasons <- SeasonalTimerange(from = \"2020-05-01\", to = \"2023-09-30\") seasons <- SeasonalTimerange(from = \"2019-11-01\", to = \"2023-03-30\") } # }"},{"path":"https://zivankaraman.github.io/CDSE/reference/UniqueCatalog.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce image catalog without multiple entries per date — UniqueCatalog","title":"Produce image catalog without multiple entries per date — UniqueCatalog","text":"Sometimes several images available given day. can useful list     given day just one row list. unique row can selected represent either     least cloud coverage biggest coverage interest.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/UniqueCatalog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce image catalog without multiple entries per date — UniqueCatalog","text":"","code":"UniqueCatalog(   imageCatalog,   by = c(\"areaCoverage\", \"tileCloudCover\"),   keep = names(imageCatalog) )"},{"path":"https://zivankaraman.github.io/CDSE/reference/UniqueCatalog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce image catalog without multiple entries per date — UniqueCatalog","text":"imageCatalog data.frame returned SearchCatalog function. character indicating attribute used select best image per date. Can either \"areaCoverage\" \"tileCloudCover\". keep list columns keep output. Default: columns input.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/UniqueCatalog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce image catalog without multiple entries per date — UniqueCatalog","text":"data.frame one row per date.","code":""},{"path":"https://zivankaraman.github.io/CDSE/reference/UniqueCatalog.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Produce image catalog without multiple entries per date — UniqueCatalog","text":"default, returned data.frame columns input catalog. User can specify subset columns include output keep parameter.","code":""},{"path":[]},{"path":"https://zivankaraman.github.io/CDSE/reference/UniqueCatalog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produce image catalog without multiple entries per date — UniqueCatalog","text":"","code":"if (FALSE) { # \\dontrun{ dsn <- system.file(\"extdata\", \"luxembourg.geojson\", package = \"CDSE\") aoi <- sf::read_sf(dsn, as_tibble = FALSE) images <- SearchCatalog(aoi = aoi, from = \"2023-07-01\", to = \"2023-07-31\",           collection = \"sentinel-2-l2a\", with_geometry = TRUE, client = OAuthClient) best_daily <- UniqueCatalog(images, by = \"areaCoverage\",                 keep = c(\"acquisitionDate\", \"tileCloudCover\", \"areaCoverage\", \"satellite\")) } # }"},{"path":"https://zivankaraman.github.io/CDSE/news/index.html","id":"cdse-03o","dir":"Changelog","previous_headings":"","what":"CDSE 0.3.O","title":"CDSE 0.3.O","text":"Adapted GetCollections handle multi-instrument collections like ‘Sentinel 3 Synergy L2’ Added MakeEvalScript function creates evalscript spectral indices defined rsi package Expanded documentation evalscripts Requests fail automatically retried case error 429 (“many requests”, often used rate limiting) 503 (“service unavailable’) Fixed internal function CheckBbox","code":""},{"path":"https://zivankaraman.github.io/CDSE/news/index.html","id":"cdse-021","dir":"Changelog","previous_headings":"","what":"CDSE 0.2.1","title":"CDSE 0.2.1","text":"CRAN release: 2024-08-31 Created package website pkgdown Added aggregation period units choice statistical values Fixed updated external URLs Improved documentation","code":""},{"path":"https://zivankaraman.github.io/CDSE/news/index.html","id":"cdse-020","dir":"Changelog","previous_headings":"","what":"CDSE 0.2.0","title":"CDSE 0.2.0","text":"CRAN release: 2024-04-30 Added Statistical API wrapper Added CSL2 filter image catalog search Added seasonal filtering image catalog Improved documentation","code":""},{"path":"https://zivankaraman.github.io/CDSE/news/index.html","id":"cdse-010","dir":"Changelog","previous_headings":"","what":"CDSE 0.1.0","title":"CDSE 0.1.0","text":"CRAN release: 2023-12-05 Initial CRAN submission.","code":""}]
